{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface.\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(\n        address account,\n        bytes4[] memory interfaceIds\n    ) internal view returns (bool[] memory) {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     *\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\n     * should be exercised when using this function.\n     *\n     * Interface identification is specified in ERC-165.\n     */\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\n        // prepare call\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\n\n        // perform static call\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly {\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0x00)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/interfaces/IProofMetadata.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.18;\r\n\r\nimport { ProofTypes } from '../libs/common/ProofTypes.sol';\r\n\r\ninterface IProofsMetadata {\r\n    event MetadataAdded(ProofTypes.Proofs proof, string indexed version, bytes metadata);\r\n    event MetadataUpdated(ProofTypes.Proofs proof, string indexed version, bytes metadata);\r\n\r\n    function proofsMetadata(\r\n        ProofTypes.Proofs _type,\r\n        string calldata _version\r\n    ) external view returns (bytes memory);\r\n\r\n    function metadataVersions(\r\n        ProofTypes.Proofs _type,\r\n        uint256 index\r\n    ) external view returns (string memory);\r\n\r\n    function getMetadataNumOfVersions(ProofTypes.Proofs _type) external view returns (uint256);\r\n\r\n    function addMetadata(\r\n        ProofTypes.Proofs _type,\r\n        string calldata _version,\r\n        bytes calldata _metadata\r\n    ) external;\r\n\r\n    function forceUpdateMetadata(\r\n        ProofTypes.Proofs _type,\r\n        string calldata _version,\r\n        bytes calldata _metadata\r\n    ) external;\r\n}"
    },
    "contracts/interfaces/IProofs.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.18;\r\n\r\nimport { ProofTypes } from '../libs/common/ProofTypes.sol';\r\n\r\ninterface IProofs {\r\n    event NewProofOfAuthority(ProofOfAuthorityMsg indexed message);\r\n    event ProofOfSignatureEvent(\r\n        address indexed signer,\r\n        bytes signature,\r\n        string indexed agreementFileCID,\r\n        string proofCID,\r\n        string proofJSON\r\n    );\r\n    event ProofOfAgreementEvent(\r\n        string indexed agreementFileCID,\r\n        string proofOfAuthorityCID,\r\n        string proofCID,\r\n        string proofJSON\r\n    );\r\n\r\n    struct EIP712Domain {\r\n        string name;\r\n        string version;\r\n    }\r\n    struct Signer {\r\n        address addr;\r\n        string metadata;\r\n    }\r\n    struct ProofOfAuthorityMsg {\r\n        string name;\r\n        address from;\r\n        string agreementFileCID;\r\n        Signer[] signers;\r\n        string app;\r\n        uint64 timestamp;\r\n        string metadata;\r\n    }\r\n    struct ProofOfAuthorityShrinked {\r\n        bytes sig;\r\n        string version;\r\n        ProofOfAuthorityMsg message;\r\n    }\r\n\r\n    /**\r\n     * Functions from variables\r\n     */\r\n    // function proofsMetadata() external view returns (address);\r\n\r\n    // function finalProofs(\r\n    //     string calldata agreementFileCID,\r\n    //     string calldata proofCID\r\n    // ) external view returns (string memory);\r\n\r\n    // function poaData(bytes32 input) external view returns (string memory);\r\n\r\n    // function posData(bytes32 input) external view returns (string memory);\r\n\r\n    // function poagData(bytes32 input) external view returns (string memory);\r\n\r\n    // function storeProofOfAuthority(\r\n    //     address _creator,\r\n    //     address[] calldata _signers,\r\n    //     string calldata _version,\r\n    //     bytes calldata _signature,\r\n    //     string calldata _fileCID,\r\n    //     string calldata _proofCID\r\n    // ) external;\r\n\r\n    // function storeProofOfSignature(\r\n    //     address _signer,\r\n    //     bytes calldata _signature,\r\n    //     string calldata _fileCID,\r\n    //     string calldata _posCID,\r\n    //     string calldata _poaCID,\r\n    //     string calldata _version\r\n    // ) external;\r\n\r\n    // function storeProofOfAgreement(\r\n    //     string calldata _fileCID,\r\n    //     string calldata _poaCID,\r\n    //     string[] calldata _posCIDs,\r\n    //     string calldata _poagCID\r\n    // ) external;\r\n}"
    },
    "contracts/libs/common/ProofTypes.sol": {
      "content": "\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.18;\r\n\r\nlibrary ProofTypes {\r\n    enum Proofs {\r\n        ProofOfAuthority,\r\n        ProofOfSignature,\r\n        ProofOfAgreement\r\n    }\r\n}"
    },
    "contracts/libs/ProofsHelper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.18;\r\n\r\nimport { ProofTypes } from './common/ProofTypes.sol';\r\nimport { StringsExpanded } from './StringsExpanded.sol';\r\nimport { IProofsMetadata } from '../interfaces/IProofMetadata.sol';\r\n\r\n/**\r\n * ProofsHelper library helps Proofs smart contract to generate Proof-of-Authority, Proof-of-Signature, and\r\n * Proof-of-Agreement in a text format\r\n */\r\nlibrary ProofsHelper {\r\n    using StringsExpanded for string;\r\n    using StringsExpanded for bytes;\r\n    using StringsExpanded for address;\r\n    using StringsExpanded for uint256;\r\n\r\n    /**\r\n     * Returns full Proof-of-Authority or Proof-of-Signature (data with signature)\r\n     * @param _creator Creator of the proof\r\n     * @param _signature Signature of the proof data\r\n     * @param _data Data that the user have signed\r\n     * @return _proof The proof object as a string\r\n     */\r\n    function getProofOfAuthorityOrSignature(\r\n        address _creator,\r\n        bytes calldata _signature,\r\n        string memory _data\r\n    ) external pure returns (string memory _proof) {\r\n        require(_creator != address(0), 'No creator');\r\n        require(_signature.length > 0, 'No signature');\r\n        require(_data.length() > 0, 'No data');\r\n        _proof = string(\r\n            abi.encodePacked(\r\n                '{\"address\":\"',\r\n                _creator.toString(),\r\n                '\",\"sig\":\"',\r\n                _signature.toHexString(),\r\n                '\",\"data\":',\r\n                _data,\r\n                '}'\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns Proof-of-Authority data for the creator to sign\r\n     * @param _proofsMetadata EIP712 part of the proof data defined in ProofsMetadata smart contract\r\n     * @param _creator Creator of the agreement\r\n     * @param _signers Signers of the agreement\r\n     * @param _agreementFileCID IPFS CID of the agreement file\r\n     * @param _version EIP712 version of the data\r\n     * @param _timestamp Timestamp of the proof\r\n     * @return data Proof-of-Authority data\r\n     */\r\n    function getProofOfAuthorityData(\r\n        address _proofsMetadata,\r\n        address _creator,\r\n        address[] calldata _signers,\r\n        string calldata _agreementFileCID,\r\n        string calldata _version,\r\n        uint256 _timestamp\r\n    ) external view returns (string memory) {\r\n        require(_creator != address(0), 'No creator');\r\n        require(_signers.length > 0, 'No signers');\r\n        require(_agreementFileCID.length() > 0, 'No Agreement File CID');\r\n        require(_version.length() > 0, 'No version');\r\n\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    IProofsMetadata(_proofsMetadata).proofsMetadata(\r\n                        ProofTypes.Proofs.ProofOfAuthority,\r\n                        _version\r\n                    ),\r\n                    ',\"message\":',\r\n                    getProofOfAuthorityDataMessage(\r\n                        _creator,\r\n                        _signers,\r\n                        _agreementFileCID,\r\n                        _timestamp\r\n                    ),\r\n                    '}'\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Returns Proof-of-Signature data for the signer to sign\r\n     * @param _proofsMetadata EIP712 part of the proof data defined in ProofsMetadata smart contract\r\n     * @param _signer Current signer of the agreement from the list of agreement signers\r\n     * @param _proofOfAuthorityCID IPFS CID of the Proof-of-Authority\r\n     * @param _version EIP712 version of the data\r\n     * @param _timestamp Timestamp of the proof\r\n     * @return data Proof-of-Signature data\r\n     */\r\n    function getProofOfSignatureData(\r\n        address _proofsMetadata,\r\n        address _signer,\r\n        string calldata _proofOfAuthorityCID,\r\n        string calldata _version,\r\n        uint256 _timestamp\r\n    ) external view returns (string memory) {\r\n        require(_signer != address(0), 'No signer');\r\n        require(_proofOfAuthorityCID.length() > 0, 'No Proof-of-Authority CID');\r\n        require(_version.length() > 0, 'No version');\r\n\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    IProofsMetadata(_proofsMetadata).proofsMetadata(\r\n                        ProofTypes.Proofs.ProofOfSignature,\r\n                        _version\r\n                    ),\r\n                    ',\"message\":',\r\n                    getProofOfSignatureDataMessage(_signer, _proofOfAuthorityCID, _timestamp),\r\n                    '}'\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Returns Proof-of-Agreement data that is equal to Proof-of-Agreement as it requires no\r\n     * signature\r\n     * @param _proofOfAuthorityCID IPFS CID of the Proof-of-Authority\r\n     * @param _proofsOfSignatureCID Array of IPFS CID of every Proof-of-Signature from the agreement\r\n     * @param _timestamp Timestamp of the proof\r\n     * @return data Proof-of-Agreement data\r\n     */\r\n    function getProofOfAgreementData(\r\n        string calldata _proofOfAuthorityCID,\r\n        string[] calldata _proofsOfSignatureCID,\r\n        uint256 _timestamp\r\n    ) external pure returns (string memory) {\r\n        require(_proofOfAuthorityCID.length() > 0, 'No Proof-of-Authority CID');\r\n        for (uint256 i = 0; i < _proofsOfSignatureCID.length; i++) {\r\n            require(_proofsOfSignatureCID[i].length() > 0, 'No Proof-of-Signature CID');\r\n        }\r\n\r\n        string memory arrOfPoSigs = '{\"proofCID\":\"';\r\n        for (uint256 i = 0; i < _proofsOfSignatureCID.length; i++) {\r\n            if (i != _proofsOfSignatureCID.length - 1) {\r\n                arrOfPoSigs = string(\r\n                    abi.encodePacked(arrOfPoSigs, _proofsOfSignatureCID[i], '\"},{\"proofCID\":\"')\r\n                );\r\n            } else {\r\n                // the last proofCID\r\n                arrOfPoSigs = string(\r\n                    abi.encodePacked(arrOfPoSigs, _proofsOfSignatureCID[i], '\"}]')\r\n                );\r\n            }\r\n        }\r\n\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    '{\"agreementFileProofCID\":\"',\r\n                    _proofOfAuthorityCID,\r\n                    '\",\"agreementSignProofs\":[',\r\n                    arrOfPoSigs,\r\n                    ',\"timestamp\":',\r\n                    _timestamp.toString(),\r\n                    '}'\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Returns the core message (without EIP712 metadata) of Proof-of-Authority for the creator to\r\n     * sign\r\n     * @param _creator Agreement creator address\r\n     * @param _signers Array of signers of the agreement\r\n     * @param _agreementFileCID IPFS CID of the agreement file\r\n     * @return _message Proof-of-Authority message to sign\r\n     */\r\n    function getProofOfAuthorityDataMessage(\r\n        address _creator,\r\n        address[] calldata _signers,\r\n        string calldata _agreementFileCID,\r\n        uint256 _timestamp\r\n    ) public pure returns (string memory _message) {\r\n        _message = string(\r\n            abi.encodePacked(\r\n                '{\"name\":\"Proof-of-Authority\",\"from\":\"',\r\n                _creator.toString(),\r\n                '\",\"agreementFileCID\":\"',\r\n                _agreementFileCID,\r\n                '\",\"signers\":',\r\n                generateSignersJSON(_signers),\r\n                ',\"app\":\"daosign\",\"timestamp\":',\r\n                _timestamp.toString(),\r\n                ',\"metadata\":\"{}\"}'\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns the core message (without EIP712 metadata) of Proof-of-Signature for the signer to\r\n     * sign\r\n     * @param _signer Current signer of the agreement from the list of agreement signers\r\n     * @param _proofOfAuthorityCID IPFS CID of the Proof-of-Authority\r\n     * @param _timestamp Timestamp of the proof\r\n     * @return _message Proof-of-Authority message to sign\r\n     */\r\n    function getProofOfSignatureDataMessage(\r\n        address _signer,\r\n        string calldata _proofOfAuthorityCID,\r\n        uint256 _timestamp\r\n    ) public pure returns (string memory _message) {\r\n        _message = string(\r\n            abi.encodePacked(\r\n                '{\"signer\":\"',\r\n                _signer.toString(),\r\n                '\",\"agreementFileProofCID\":\"',\r\n                _proofOfAuthorityCID,\r\n                '\",\"app\":\"daosign\",\"timestamp\":',\r\n                _timestamp.toString(),\r\n                ',\"metadata\":{}}'\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Generates a JSON stringified content with signers of the agreement\r\n     * @param _signers Array of signers of the agreement\r\n     * @return res JSON stringified list of signers\r\n     */\r\n    function generateSignersJSON(address[] calldata _signers) public pure returns (string memory) {\r\n        string memory res = '[';\r\n\r\n        for (uint256 i = 0; i < _signers.length; i++) {\r\n            res = res.concat(\r\n                string(abi.encodePacked('{\"addr\":\"', _signers[i].toString(), '\",\"metadata\":\"{}\"}'))\r\n            );\r\n            if (i != _signers.length - 1) {\r\n                res = res.concat(',');\r\n            }\r\n        }\r\n\r\n        res = res.concat(']');\r\n\r\n        return res;\r\n    }\r\n}"
    },
    "contracts/libs/ProofVerification.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.18;\r\n\r\nimport { ECDSA } from '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\r\n\r\n/**\r\n * Verifies Proof-of-Authority and Proof-of-Signature validity. May be used to verify any Ethereum\r\n * signature.\r\n */\r\nlibrary ProofsVerification {\r\n    using ECDSA for bytes32;\r\n\r\n    /**\r\n     * Verify Proof-of-Authority or Proof-of-Signature signature\r\n     * @param _signer Signer of the data\r\n     * @param _data Raw Proof-of-Authority stringified JSON object that the signer signs.\r\n     *              Note: it may be the output of Proofs.getProofOfSignatureData function\r\n     * @param _signature Signature of the {_data}\r\n     * @return isValid Is signature valid or not\r\n     */\r\n    function verifySignedProof(\r\n        address _signer,\r\n        string memory _data,\r\n        bytes calldata _signature\r\n    ) public pure returns (bool) {\r\n        bytes32 dataHash = keccak256(abi.encodePacked(_data));\r\n        return verify(_signer, dataHash, _signature);\r\n    }\r\n\r\n    /**\r\n     * Verify any Ethereum signature of any data\r\n     * @param _signer Signer of the data\r\n     * @param _dataHash Hash of the data that was signed\r\n     * @param _signature Signature of the data\r\n     * @return isValid Is signature valid or not\r\n     */\r\n    function verify(\r\n        address _signer,\r\n        bytes32 _dataHash,\r\n        bytes calldata _signature\r\n    ) public pure returns (bool) {\r\n        return _dataHash.toEthSignedMessageHash().recover(_signature) == _signer;\r\n    }\r\n}"
    },
    "contracts/libs/StringsExpanded.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.18;\r\n\r\n/**\r\n * Enhances operation with strings that are not possible in the current Solidity version (v0.8.18)\r\n */\r\nlibrary StringsExpanded {\r\n    /**\r\n     * @dev Compares two strings\r\n     * @param _s1 One string\r\n     * @param _s2 Another string\r\n     * @return Are string equal\r\n     */\r\n    function equal(string memory _s1, string memory _s2) internal pure returns (bool) {\r\n        return keccak256(abi.encodePacked(_s1)) == keccak256(abi.encodePacked(_s2));\r\n    }\r\n\r\n    /**\r\n     * Gets length of the string\r\n     * @param _s Input string\r\n     * @return res The lenght of the string\r\n     */\r\n    function length(string memory _s) public pure returns (uint256) {\r\n        return bytes(_s).length;\r\n    }\r\n\r\n    /**\r\n     * Combines two input strings into one\r\n     * @param _s1 The first string\r\n     * @param _s2 The second string\r\n     * @return res The resultant string created by merging s1 and s2\r\n     */\r\n    function concat(string memory _s1, string memory _s2) public pure returns (string memory) {\r\n        return string(abi.encodePacked(_s1, _s2));\r\n    }\r\n\r\n    /**\r\n     * Converts a `uint256` to its ASCII `string` decimal representation\r\n     * @notice Inspired by OraclizeAPI's implementation - MIT licence\r\n     * https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n     * @param _x Input number\r\n     * @return res Number represented as a string\r\n     */\r\n    function toString(uint256 _x) public pure returns (string memory) {\r\n        if (_x == 0) {\r\n            return '0';\r\n        }\r\n        uint256 _temp = _x;\r\n        uint256 _digits;\r\n        while (_temp != 0) {\r\n            _digits++;\r\n            _temp /= 10;\r\n        }\r\n        bytes memory _buffer = new bytes(_digits);\r\n        while (_x != 0) {\r\n            _digits -= 1;\r\n            _buffer[_digits] = bytes1(uint8(48 + uint256(_x % 10)));\r\n            _x /= 10;\r\n        }\r\n        return string(_buffer);\r\n    }\r\n\r\n    /**\r\n     * Converts an Ethereum address to a string\r\n     * Note: only lowercase letters are used\r\n     * @param _addr The Ethereum address to convert\r\n     * @return res The string representation of the Ethereum address, including the '0x' prefix\r\n     */\r\n    function toString(address _addr) public pure returns (string memory) {\r\n        bytes32 _bytes = bytes32(uint256(uint160(_addr)));\r\n        bytes memory HEX = '0123456789abcdef';\r\n        bytes memory str = new bytes(42);\r\n        str[0] = '0';\r\n        str[1] = 'x';\r\n        for (uint i = 0; i < 20; i++) {\r\n            str[i * 2 + 2] = HEX[uint8(_bytes[i + 12] >> 4)];\r\n            str[i * 2 + 3] = HEX[uint8(_bytes[i + 12] & 0x0f)];\r\n        }\r\n        return string(str);\r\n    }\r\n\r\n    /**\r\n     * Converts Solidity bytes to a string\r\n     * @param _bytes Input bytes\r\n     * @return res Input bytes in a string format with '0x' prefix\r\n     */\r\n    function toHexString(bytes memory _bytes) public pure returns (string memory) {\r\n        bytes memory hexString = new bytes(_bytes.length * 2);\r\n\r\n        uint256 index = 0;\r\n        for (uint256 i = 0; i < _bytes.length; i++) {\r\n            uint256 value = uint256(uint8(_bytes[i]));\r\n\r\n            bytes1 highNibble = bytes1(uint8((value & 0xf0) >> 4));\r\n            bytes1 lowNibble = bytes1(uint8(value & 0x0f));\r\n\r\n            hexString[index++] = charToHex(highNibble);\r\n            hexString[index++] = charToHex(lowNibble);\r\n        }\r\n\r\n        return string(abi.encodePacked('0x', string(hexString)));\r\n    }\r\n\r\n    function charToHex(bytes1 _char) private pure returns (bytes1) {\r\n        if (uint8(_char) < 10) {\r\n            return bytes1(uint8(_char) + 0x30); // '0' to '9'\r\n        } else {\r\n            return bytes1(uint8(_char) + 0x57); // 'a' to 'f'\r\n        }\r\n    }\r\n}"
    },
    "contracts/Proofs.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.18;\r\n\r\nimport { IERC165 } from '@openzeppelin/contracts/utils/introspection/IERC165.sol';\r\nimport { ERC165Checker } from '@openzeppelin/contracts/utils/introspection/ERC165Checker.sol';\r\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\r\nimport  {IProofsMetadata}  from './interfaces/IProofMetadata.sol';\r\nimport { IProofs } from './interfaces/IProofs.sol';\r\nimport { StringsExpanded } from './libs/StringsExpanded.sol';\r\nimport { ProofsVerification } from './libs/ProofVerification.sol';\r\nimport { ProofsHelper } from './libs/ProofsHelper.sol';\r\nimport { ProofTypes } from './libs/common/ProofTypes.sol';\r\nimport { ECDSA } from '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\r\n\r\n/**\r\n * Stores DAOsign proofs.\r\n *\r\n * Note\r\n * Proof-of-Authority = PoA\r\n * Proof-of-Signature = PoS\r\n * Proof-of-Agreement = PoAg\r\n */\r\ncontract Proofs is Ownable, IProofs {\r\n    using StringsExpanded for string;\r\n    using ECDSA for bytes32;\r\n\r\n    address public proofsMetadata;\r\n\r\n    // Agreement File CID -> proof CID -> proof data\r\n    mapping(string => mapping(string => string)) public finalProofs;\r\n\r\n    // hashed proof params -> proof data\r\n    mapping(bytes32 => string) public poaData;\r\n    mapping(bytes32 => string) public posData;\r\n    mapping(bytes32 => string) public poagData;\r\n\r\n    mapping(bytes32 => bytes) private proofs;\r\n    mapping(address => bytes32[]) public myProofKeys;\r\n\r\n    constructor(address _proofsMetadata, address _admin) {\r\n        require(\r\n            ERC165Checker.supportsERC165(_proofsMetadata) &&\r\n                IERC165(_proofsMetadata).supportsInterface(type(IProofsMetadata).interfaceId),\r\n            'Must support IProofsMetadata'\r\n        );\r\n        proofsMetadata = _proofsMetadata;\r\n        _transferOwnership(_admin);\r\n    }\r\n\r\n    /**\r\n     * TODO: move to ProofsMetadata\r\n     */\r\n    EIP712Domain public domain = EIP712Domain({ name: 'daosign', version: '0.1.0' });\r\n\r\n    bytes32 constant EIP712DOMAIN_TYPEHASH = keccak256('EIP712Domain(string name,string version)');\r\n    bytes32 constant PROOF_AUTHORITY_TYPEHASH =\r\n        keccak256(\r\n            'ProofOfAuthorityMsg(string name,address from,string agreementFileCID,Signer[] signers,string app,uint64 timestamp,string metadata)Signer(address addr,string metadata)'\r\n        );\r\n    bytes32 constant SIGNER_TYPEHASH = keccak256('Signer(address addr,string metadata)');\r\n\r\n    function hash(EIP712Domain memory _input) internal pure returns (bytes32) {\r\n        bytes memory encoded = abi.encode(\r\n            EIP712DOMAIN_TYPEHASH,\r\n            keccak256(bytes(_input.name)),\r\n            keccak256(bytes(_input.version))\r\n        );\r\n        return keccak256(encoded);\r\n    }\r\n\r\n    function hash(Signer memory _input) internal pure returns (bytes32) {\r\n        bytes memory encoded = abi.encode(\r\n            SIGNER_TYPEHASH,\r\n            _input.addr,\r\n            keccak256(bytes(_input.metadata))\r\n        );\r\n        return keccak256(encoded);\r\n    }\r\n\r\n    function hash(Signer[] memory _input) public pure returns (bytes32) {\r\n        bytes memory encoded;\r\n        for (uint i = 0; i < _input.length; i++) {\r\n            encoded = abi.encodePacked(encoded, hash(_input[i]));\r\n        }\r\n        return keccak256(encoded);\r\n    }\r\n\r\n    function hash(ProofOfAuthorityMsg memory _input) public pure returns (bytes32) {\r\n        bytes memory encoded = abi.encode(\r\n            PROOF_AUTHORITY_TYPEHASH,\r\n            keccak256(bytes(_input.name)),\r\n            _input.from,\r\n            keccak256(bytes(_input.agreementFileCID)),\r\n            hash(_input.signers),\r\n            keccak256(bytes(_input.app)),\r\n            _input.timestamp,\r\n            keccak256(bytes(_input.metadata))\r\n        );\r\n        return keccak256(encoded);\r\n    }\r\n\r\n    function recover(\r\n        ProofOfAuthorityMsg memory message,\r\n        bytes memory signature\r\n    ) public pure returns (address) {\r\n        bytes32 DOMAIN_HASH = hash(EIP712Domain({ name: 'daosign', version: '0.1.0' }));\r\n\r\n        bytes32 packetHash = hash(message);\r\n        bytes32 digest = keccak256(abi.encodePacked('\\x19\\x01', DOMAIN_HASH, packetHash));\r\n        return digest.recover(signature);\r\n    }\r\n\r\n    function validate(ProofOfAuthorityMsg memory message) internal view returns (bool) {\r\n        require(message.name.equal('Proof-of-Authority'), 'Invalid name');\r\n        // require(message.from == signer, 'Invalid from address');\r\n        require(message.agreementFileCID.length() == 46, 'Invalid CID length');\r\n        require(message.app.equal('daosign'), 'Invalid app');\r\n        require(\r\n            message.timestamp <= block.timestamp && message.timestamp >= block.timestamp - 3 hours,\r\n            'Invalid timestamp'\r\n        );\r\n\r\n        for (uint256 i = 0; i < message.signers.length; i++) {\r\n            require(message.signers[i].addr != address(0), 'Invalid signer');\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function save(\r\n        ProofOfAuthorityMsg memory message,\r\n        bytes memory signature,\r\n        string memory version\r\n    ) internal {\r\n        bytes32 key = keccak256(abi.encode(message));\r\n        proofs[key] = abi.encode(ProofOfAuthorityShrinked(signature, version, message));\r\n        myProofKeys[message.from].push(key);\r\n        emit NewProofOfAuthority((message));\r\n    }\r\n\r\n    function get(\r\n        ProofOfAuthorityMsg memory message\r\n    ) public view returns (ProofOfAuthorityShrinked memory) {\r\n        return abi.decode(proofs[keccak256(abi.encode(message))], (ProofOfAuthorityShrinked));\r\n    }\r\n\r\n    function store(\r\n        ProofOfAuthorityMsg memory message,\r\n        bytes memory signature,\r\n        string memory version\r\n    ) public {\r\n        require(recover(message, signature) == message.from, 'Invalid signature');\r\n        require(validate(message));\r\n        save(message, signature, version);\r\n    }\r\n\r\n    // /**\r\n    //  * Stores Proof-of-Signature after verifying the correctness of the signature\r\n    //  * @param _signer Current signer of the agreement from the list of agreement signers\r\n    //  * @param _signature Signature of Proof-of-Signature data\r\n    //  * @param _fileCID IPFS CID of the agreement file\r\n    //  * @param _posCID IPFS CID of Proof-of-Signature\r\n    //  */\r\n    // function storeProofOfSignature(\r\n    //     address _signer,\r\n    //     bytes calldata _signature,\r\n    //     string calldata _fileCID,\r\n    //     string calldata _posCID,\r\n    //     string calldata _poaCID,\r\n    //     string calldata _version\r\n    // ) external onlyOwner {\r\n    //     require(_posCID.length() > 0, 'No ProofCID');\r\n    //     require(finalProofs[_fileCID][_posCID].length() == 0, 'Proof already stored');\r\n    //     string memory _posData = getPoSData(_signer, _fileCID, _poaCID, _version);\r\n    //     require(\r\n    //         ProofsVerification.verifySignedProof(_signer, _posData, _signature),\r\n    //         'Invalid signature'\r\n    //     );\r\n\r\n    //     string memory proof = ProofsHelper.getProofOfAuthorityOrSignature(\r\n    //         _signer,\r\n    //         _signature,\r\n    //         _posData\r\n    //     );\r\n    //     finalProofs[_fileCID][_posCID] = proof;\r\n\r\n    //     emit ProofOfSignatureEvent(_signer, _signature, _fileCID, _posCID, proof);\r\n    // }\r\n\r\n    // /**\r\n    //  * Stores Proof-of-Agreement\r\n    //  * @param _fileCID IPFS CID of the agreement file\r\n    //  * @param _poaCID IPFS CID of Proof-of-Authority\r\n    //  * @param _posCIDs IPFS CIDs of Proof-of-Signature\r\n    //  * @param _poagCID IPFS CID of Proof-of-Agreement\r\n    //  */\r\n    // function storeProofOfAgreement(\r\n    //     string calldata _fileCID,\r\n    //     string calldata _poaCID,\r\n    //     string[] calldata _posCIDs,\r\n    //     string calldata _poagCID\r\n    // ) external onlyOwner {\r\n    //     require(_poagCID.length() > 0, 'No ProofCID');\r\n    //     require(_fileCID.length() > 0, 'No Agreement File CID');\r\n    //     require(finalProofs[_fileCID][_poagCID].length() == 0, 'Proof already stored');\r\n    //     require(finalProofs[_fileCID][_poaCID].length() > 0, 'Invalid input data');\r\n\r\n    //     finalProofs[_fileCID][_poagCID] = getPoAgData(_fileCID, _poaCID, _posCIDs);\r\n\r\n    //     emit ProofOfAgreementEvent(_fileCID, _poaCID, _poagCID, finalProofs[_fileCID][_poagCID]);\r\n    // }\r\n}"
    },
    "contracts/ProofsMetadata.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.18;\r\n\r\n// import \"hardhat/console.sol\";\r\n\r\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\r\nimport { ERC165 } from '@openzeppelin/contracts/utils/introspection/ERC165.sol';\r\nimport { StringsExpanded } from './libs/StringsExpanded.sol';\r\nimport { ProofTypes } from './libs/common/ProofTypes.sol';\r\nimport { IProofsMetadata } from './interfaces/IProofMetadata.sol';\r\n\r\n/**\r\n * Stores metadata for Proof-of-Authority, Proof-of-Signature, Proof-of-Agreement. Has an owner who\r\n * can update this metadata.\r\n */\r\ncontract ProofsMetadata is IProofsMetadata, Ownable, ERC165 {\r\n    using StringsExpanded for string;\r\n\r\n    // proof type -> version -> metadata itself\r\n    mapping(ProofTypes.Proofs => mapping(string => bytes)) public proofsMetadata;\r\n    // proof type -> history of versions\r\n    mapping(ProofTypes.Proofs => string[]) public metadataVersions;\r\n\r\n    function supportsInterface(\r\n        bytes4 interfaceId\r\n    ) public view virtual override(ERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IProofsMetadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * Get number of versions that exist for metadata by its name\r\n     * @param _type Type of the proof metadata. Declared in {ProofTypes} library\r\n     * @return numVersions Number of versions.\r\n     */\r\n    function getMetadataNumOfVersions(ProofTypes.Proofs _type) public view returns (uint256) {\r\n        return metadataVersions[_type].length;\r\n    }\r\n\r\n    /**\r\n     * Add metadata by the contract administrator.\r\n     * @param _type Type of the proof metadata. Declared in {ProofTypes} library\r\n     * @param _version Protocol version of the metadata. The version should be increased every time\r\n     *                there is a change in the metadata.\r\n     * @param _metadata Metadata in JSON format.\r\n     */\r\n    function addMetadata(\r\n        ProofTypes.Proofs _type,\r\n        string calldata _version,\r\n        bytes calldata _metadata\r\n    ) public onlyOwner {\r\n        require(_version.length() > 0 && _metadata.length > 0, 'Input params cannot be empty');\r\n        require(proofsMetadata[_type][_version].length == 0, 'Metadata already exists');\r\n\r\n        proofsMetadata[_type][_version] = _metadata;\r\n        metadataVersions[_type].push(_version);\r\n\r\n        emit MetadataAdded(_type, _version, _metadata);\r\n    }\r\n\r\n    /**\r\n     * Update metadata by the contract administrator.\r\n     * Note: This has to be done ONLY in the event of incorrect data entry in `addMetadata`\r\n     *       function. Update of metadata on the protocol level should be done by adding another\r\n     *       metadata with newer version.\r\n     * @param _type Type of the proof metadata. Declared in {ProofTypes} library\r\n     * @param _version Protocol version of the metadata. The version should be increased every time\r\n     *                there is a change in the metadata. This function is only to adjusting the\r\n     *                inconsistency of metadata in smart contract and the one, used on the website.\r\n     * @param _metadata Metadata in JSON format.\r\n     */\r\n    function forceUpdateMetadata(\r\n        ProofTypes.Proofs _type,\r\n        string calldata _version,\r\n        bytes calldata _metadata\r\n    ) public onlyOwner {\r\n        require(_version.length() > 0 && _metadata.length > 0, 'Input params cannot be empty');\r\n        require(proofsMetadata[_type][_version].length > 0, 'Metadata does not exist');\r\n\r\n        proofsMetadata[_type][_version] = _metadata;\r\n\r\n        emit MetadataUpdated(_type, _version, _metadata);\r\n    }\r\n}"
    },
    "contracts/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}