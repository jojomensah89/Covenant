{
  "address": "0x377662a8588c20Bf94B3b5685d096FE1CdF70Ef6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_s1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_s2",
          "type": "string"
        }
      ],
      "name": "concat",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_s",
          "type": "string"
        }
      ],
      "name": "length",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        }
      ],
      "name": "toHexString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_x",
          "type": "uint256"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xdab378596f5238232c5ea485226b04aff1ed373a7580d4dac08a3d2d8e0b1268",
  "receipt": {
    "to": null,
    "from": "0xde358FCcA54Fa226aE16Ac3927487260dAfc3835",
    "contractAddress": "0x377662a8588c20Bf94B3b5685d096FE1CdF70Ef6",
    "transactionIndex": 0,
    "gasUsed": "921180",
    "logsBloom": "0x
    "blockHash": "0x1ea98582415848851e78ed431a88955151e7622d28494a031948ffe416486c4c",
    "transactionHash": "0xdab378596f5238232c5ea485226b04aff1ed373a7580d4dac08a3d2d8e0b1268",
    "logs": [],
    "blockNumber": 3006138,
    "cumulativeGasUsed": "921180",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e03c71885da52b71bfb59f715f690cfe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_s1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_s2\",\"type\":\"string\"}],\"name\":\"concat\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_s\",\"type\":\"string\"}],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"}],\"name\":\"toHexString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_x\",\"type\":\"uint256\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"concat(string,string)\":{\"params\":{\"_s1\":\"The first string\",\"_s2\":\"The second string\"},\"returns\":{\"_0\":\"res The resultant string created by merging s1 and s2\"}},\"length(string)\":{\"params\":{\"_s\":\"Input string\"},\"returns\":{\"_0\":\"res The lenght of the string\"}},\"toHexString(bytes)\":{\"params\":{\"_bytes\":\"Input bytes\"},\"returns\":{\"_0\":\"res Input bytes in a string format with '0x' prefix\"}},\"toString(address)\":{\"params\":{\"_addr\":\"The Ethereum address to convert\"},\"returns\":{\"_0\":\"res The string representation of the Ethereum address, including the '0x' prefix\"}},\"toString(uint256)\":{\"params\":{\"_x\":\"Input number\"},\"returns\":{\"_0\":\"res Number represented as a string\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"concat(string,string)\":{\"notice\":\"Combines two input strings into one\"},\"length(string)\":{\"notice\":\"Gets length of the string\"},\"toHexString(bytes)\":{\"notice\":\"Converts Solidity bytes to a string\"},\"toString(address)\":{\"notice\":\"Converts an Ethereum address to a string Note: only lowercase letters are used\"},\"toString(uint256)\":{\"notice\":\"Converts a `uint256` to its ASCII `string` decimal representationInspired by OraclizeAPI's implementation - MIT licence https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\"}},\"notice\":\"Enhances operation with strings that are not possible in the current Solidity version (v0.8.18)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libs/StringsExpanded.sol\":\"StringsExpanded\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libs/StringsExpanded.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n/**\\r\\n * Enhances operation with strings that are not possible in the current Solidity version (v0.8.18)\\r\\n */\\r\\nlibrary StringsExpanded {\\r\\n    /**\\r\\n     * @dev Compares two strings\\r\\n     * @param _s1 One string\\r\\n     * @param _s2 Another string\\r\\n     * @return Are string equal\\r\\n     */\\r\\n    function equal(string memory _s1, string memory _s2) internal pure returns (bool) {\\r\\n        return keccak256(abi.encodePacked(_s1)) == keccak256(abi.encodePacked(_s2));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Gets length of the string\\r\\n     * @param _s Input string\\r\\n     * @return res The lenght of the string\\r\\n     */\\r\\n    function length(string memory _s) public pure returns (uint256) {\\r\\n        return bytes(_s).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Combines two input strings into one\\r\\n     * @param _s1 The first string\\r\\n     * @param _s2 The second string\\r\\n     * @return res The resultant string created by merging s1 and s2\\r\\n     */\\r\\n    function concat(string memory _s1, string memory _s2) public pure returns (string memory) {\\r\\n        return string(abi.encodePacked(_s1, _s2));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Converts a `uint256` to its ASCII `string` decimal representation\\r\\n     * @notice Inspired by OraclizeAPI's implementation - MIT licence\\r\\n     * https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n     * @param _x Input number\\r\\n     * @return res Number represented as a string\\r\\n     */\\r\\n    function toString(uint256 _x) public pure returns (string memory) {\\r\\n        if (_x == 0) {\\r\\n            return '0';\\r\\n        }\\r\\n        uint256 _temp = _x;\\r\\n        uint256 _digits;\\r\\n        while (_temp != 0) {\\r\\n            _digits++;\\r\\n            _temp /= 10;\\r\\n        }\\r\\n        bytes memory _buffer = new bytes(_digits);\\r\\n        while (_x != 0) {\\r\\n            _digits -= 1;\\r\\n            _buffer[_digits] = bytes1(uint8(48 + uint256(_x % 10)));\\r\\n            _x /= 10;\\r\\n        }\\r\\n        return string(_buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Converts an Ethereum address to a string\\r\\n     * Note: only lowercase letters are used\\r\\n     * @param _addr The Ethereum address to convert\\r\\n     * @return res The string representation of the Ethereum address, including the '0x' prefix\\r\\n     */\\r\\n    function toString(address _addr) public pure returns (string memory) {\\r\\n        bytes32 _bytes = bytes32(uint256(uint160(_addr)));\\r\\n        bytes memory HEX = '0123456789abcdef';\\r\\n        bytes memory str = new bytes(42);\\r\\n        str[0] = '0';\\r\\n        str[1] = 'x';\\r\\n        for (uint i = 0; i < 20; i++) {\\r\\n            str[i * 2 + 2] = HEX[uint8(_bytes[i + 12] >> 4)];\\r\\n            str[i * 2 + 3] = HEX[uint8(_bytes[i + 12] & 0x0f)];\\r\\n        }\\r\\n        return string(str);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Converts Solidity bytes to a string\\r\\n     * @param _bytes Input bytes\\r\\n     * @return res Input bytes in a string format with '0x' prefix\\r\\n     */\\r\\n    function toHexString(bytes memory _bytes) public pure returns (string memory) {\\r\\n        bytes memory hexString = new bytes(_bytes.length * 2);\\r\\n\\r\\n        uint256 index = 0;\\r\\n        for (uint256 i = 0; i < _bytes.length; i++) {\\r\\n            uint256 value = uint256(uint8(_bytes[i]));\\r\\n\\r\\n            bytes1 highNibble = bytes1(uint8((value & 0xf0) >> 4));\\r\\n            bytes1 lowNibble = bytes1(uint8(value & 0x0f));\\r\\n\\r\\n            hexString[index++] = charToHex(highNibble);\\r\\n            hexString[index++] = charToHex(lowNibble);\\r\\n        }\\r\\n\\r\\n        return string(abi.encodePacked('0x', string(hexString)));\\r\\n    }\\r\\n\\r\\n    function charToHex(bytes1 _char) private pure returns (bytes1) {\\r\\n        if (uint8(_char) < 10) {\\r\\n            return bytes1(uint8(_char) + 0x30); // '0' to '9'\\r\\n        } else {\\r\\n            return bytes1(uint8(_char) + 0x57); // 'a' to 'f'\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xb3480132ce0f48ca9c7e33005afc117d2d268aad436fc867ed1d2d8e705cb6ac\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x610fbf610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c8063436a66e71461006657806356ca623e146100965780636900a3ae146100c657806389c19ddb146100f6578063c937279314610126575b600080fd5b610080600480360381019061007b9190610934565b610156565b60405161008d9190610996565b60405180910390f35b6100b060048036038101906100ab9190610a0f565b610161565b6040516100bd9190610abb565b60405180910390f35b6100e060048036038101906100db9190610b09565b61046b565b6040516100ed9190610abb565b60405180910390f35b610110600480360381019061010b9190610b36565b6105cb565b60405161011d9190610abb565b60405180910390f35b610140600480360381019061013b9190610c4f565b6105f7565b60405161014d9190610abb565b60405180910390f35b600081519050919050565b606060008273ffffffffffffffffffffffffffffffffffffffff1660001b905060006040518060400160405280601081526020017f303132333435363738396162636465660000000000000000000000000000000081525090506000602a67ffffffffffffffff8111156101d8576101d7610809565b5b6040519080825280601f01601f19166020018201604052801561020a5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061024257610241610c98565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106102a6576102a5610c98565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b601481101561045f5782600485600c846102f29190610cf6565b6020811061030357610302610c98565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff168151811061034257610341610c98565b5b602001015160f81c60f81b826002808461035c9190610d2a565b6103669190610cf6565b8151811061037757610376610c98565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b85600c846103ba9190610cf6565b602081106103cb576103ca610c98565b5b1a60f81b1660f81c60ff16815181106103e7576103e6610c98565b5b602001015160f81c60f81b8260036002846104029190610d2a565b61040c9190610cf6565b8151811061041d5761041c610c98565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061045790610d6c565b9150506102d8565b50809350505050919050565b6060600082036104b2576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506105c6565b600082905060005b600082146104e45780806104cd90610d6c565b915050600a826104dd9190610de3565b91506104ba565b60008167ffffffffffffffff811115610500576104ff610809565b5b6040519080825280601f01601f1916602001820160405280156105325781602001600182028036833780820191505090505b5090505b600085146105bf5760018261054b9190610e14565b9150600a8561055a9190610e48565b60306105669190610cf6565b60f81b81838151811061057c5761057b610c98565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856105b89190610de3565b9450610536565b8093505050505b919050565b606082826040516020016105e0929190610eb5565b604051602081830303815290604052905092915050565b60606000600283516106099190610d2a565b67ffffffffffffffff81111561062257610621610809565b5b6040519080825280601f01601f1916602001820160405280156106545781602001600182028036833780820191505090505b5090506000805b845181101561076a57600085828151811061067957610678610c98565b5b602001015160f81c60f81b60f81c60ff1690506000600460f08316901c60f81b90506000600f831660f81b90506106af82610794565b8686806106bb90610d6c565b9750815181106106ce576106cd610c98565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061070681610794565b86868061071290610d6c565b97508151811061072557610724610c98565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350505050808061076290610d6c565b91505061065b565b508160405160200161077c9190610f25565b60405160208183030381529060405292505050919050565b6000600a8260f81c60ff1610156107bf5760308260f81c6107b59190610f54565b60f81b90506107d5565b60578260f81c6107cf9190610f54565b60f81b90505b919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610841826107f8565b810181811067ffffffffffffffff821117156108605761085f610809565b5b80604052505050565b60006108736107da565b905061087f8282610838565b919050565b600067ffffffffffffffff82111561089f5761089e610809565b5b6108a8826107f8565b9050602081019050919050565b82818337600083830152505050565b60006108d76108d284610884565b610869565b9050828152602081018484840111156108f3576108f26107f3565b5b6108fe8482856108b5565b509392505050565b600082601f83011261091b5761091a6107ee565b5b813561092b8482602086016108c4565b91505092915050565b60006020828403121561094a576109496107e4565b5b600082013567ffffffffffffffff811115610968576109676107e9565b5b61097484828501610906565b91505092915050565b6000819050919050565b6109908161097d565b82525050565b60006020820190506109ab6000830184610987565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109dc826109b1565b9050919050565b6109ec816109d1565b81146109f757600080fd5b50565b600081359050610a09816109e3565b92915050565b600060208284031215610a2557610a246107e4565b5b6000610a33848285016109fa565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a76578082015181840152602081019050610a5b565b60008484015250505050565b6000610a8d82610a3c565b610a978185610a47565b9350610aa7818560208601610a58565b610ab0816107f8565b840191505092915050565b60006020820190508181036000830152610ad58184610a82565b905092915050565b610ae68161097d565b8114610af157600080fd5b50565b600081359050610b0381610add565b92915050565b600060208284031215610b1f57610b1e6107e4565b5b6000610b2d84828501610af4565b91505092915050565b60008060408385031215610b4d57610b4c6107e4565b5b600083013567ffffffffffffffff811115610b6b57610b6a6107e9565b5b610b7785828601610906565b925050602083013567ffffffffffffffff811115610b9857610b976107e9565b5b610ba485828601610906565b9150509250929050565b600067ffffffffffffffff821115610bc957610bc8610809565b5b610bd2826107f8565b9050602081019050919050565b6000610bf2610bed84610bae565b610869565b905082815260208101848484011115610c0e57610c0d6107f3565b5b610c198482856108b5565b509392505050565b600082601f830112610c3657610c356107ee565b5b8135610c46848260208601610bdf565b91505092915050565b600060208284031215610c6557610c646107e4565b5b600082013567ffffffffffffffff811115610c8357610c826107e9565b5b610c8f84828501610c21565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d018261097d565b9150610d0c8361097d565b9250828201905080821115610d2457610d23610cc7565b5b92915050565b6000610d358261097d565b9150610d408361097d565b9250828202610d4e8161097d565b91508282048414831517610d6557610d64610cc7565b5b5092915050565b6000610d778261097d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610da957610da8610cc7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610dee8261097d565b9150610df98361097d565b925082610e0957610e08610db4565b5b828204905092915050565b6000610e1f8261097d565b9150610e2a8361097d565b9250828203905081811115610e4257610e41610cc7565b5b92915050565b6000610e538261097d565b9150610e5e8361097d565b925082610e6e57610e6d610db4565b5b828206905092915050565b600081905092915050565b6000610e8f82610a3c565b610e998185610e79565b9350610ea9818560208601610a58565b80840191505092915050565b6000610ec18285610e84565b9150610ecd8284610e84565b91508190509392505050565b7f3078000000000000000000000000000000000000000000000000000000000000600082015250565b6000610f0f600283610e79565b9150610f1a82610ed9565b600282019050919050565b6000610f3082610f02565b9150610f3c8284610e84565b915081905092915050565b600060ff82169050919050565b6000610f5f82610f47565b9150610f6a83610f47565b9250828201905060ff811115610f8357610f82610cc7565b5b9291505056fea26469706673582212209cb19885fea7475e499d275bfc0e3f7ceef135bf92229018a1f2ef321658eb6664736f6c63430008120033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c8063436a66e71461006657806356ca623e146100965780636900a3ae146100c657806389c19ddb146100f6578063c937279314610126575b600080fd5b610080600480360381019061007b9190610934565b610156565b60405161008d9190610996565b60405180910390f35b6100b060048036038101906100ab9190610a0f565b610161565b6040516100bd9190610abb565b60405180910390f35b6100e060048036038101906100db9190610b09565b61046b565b6040516100ed9190610abb565b60405180910390f35b610110600480360381019061010b9190610b36565b6105cb565b60405161011d9190610abb565b60405180910390f35b610140600480360381019061013b9190610c4f565b6105f7565b60405161014d9190610abb565b60405180910390f35b600081519050919050565b606060008273ffffffffffffffffffffffffffffffffffffffff1660001b905060006040518060400160405280601081526020017f303132333435363738396162636465660000000000000000000000000000000081525090506000602a67ffffffffffffffff8111156101d8576101d7610809565b5b6040519080825280601f01601f19166020018201604052801561020a5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061024257610241610c98565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106102a6576102a5610c98565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b601481101561045f5782600485600c846102f29190610cf6565b6020811061030357610302610c98565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff168151811061034257610341610c98565b5b602001015160f81c60f81b826002808461035c9190610d2a565b6103669190610cf6565b8151811061037757610376610c98565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b85600c846103ba9190610cf6565b602081106103cb576103ca610c98565b5b1a60f81b1660f81c60ff16815181106103e7576103e6610c98565b5b602001015160f81c60f81b8260036002846104029190610d2a565b61040c9190610cf6565b8151811061041d5761041c610c98565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061045790610d6c565b9150506102d8565b50809350505050919050565b6060600082036104b2576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506105c6565b600082905060005b600082146104e45780806104cd90610d6c565b915050600a826104dd9190610de3565b91506104ba565b60008167ffffffffffffffff811115610500576104ff610809565b5b6040519080825280601f01601f1916602001820160405280156105325781602001600182028036833780820191505090505b5090505b600085146105bf5760018261054b9190610e14565b9150600a8561055a9190610e48565b60306105669190610cf6565b60f81b81838151811061057c5761057b610c98565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856105b89190610de3565b9450610536565b8093505050505b919050565b606082826040516020016105e0929190610eb5565b604051602081830303815290604052905092915050565b60606000600283516106099190610d2a565b67ffffffffffffffff81111561062257610621610809565b5b6040519080825280601f01601f1916602001820160405280156106545781602001600182028036833780820191505090505b5090506000805b845181101561076a57600085828151811061067957610678610c98565b5b602001015160f81c60f81b60f81c60ff1690506000600460f08316901c60f81b90506000600f831660f81b90506106af82610794565b8686806106bb90610d6c565b9750815181106106ce576106cd610c98565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061070681610794565b86868061071290610d6c565b97508151811061072557610724610c98565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350505050808061076290610d6c565b91505061065b565b508160405160200161077c9190610f25565b60405160208183030381529060405292505050919050565b6000600a8260f81c60ff1610156107bf5760308260f81c6107b59190610f54565b60f81b90506107d5565b60578260f81c6107cf9190610f54565b60f81b90505b919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610841826107f8565b810181811067ffffffffffffffff821117156108605761085f610809565b5b80604052505050565b60006108736107da565b905061087f8282610838565b919050565b600067ffffffffffffffff82111561089f5761089e610809565b5b6108a8826107f8565b9050602081019050919050565b82818337600083830152505050565b60006108d76108d284610884565b610869565b9050828152602081018484840111156108f3576108f26107f3565b5b6108fe8482856108b5565b509392505050565b600082601f83011261091b5761091a6107ee565b5b813561092b8482602086016108c4565b91505092915050565b60006020828403121561094a576109496107e4565b5b600082013567ffffffffffffffff811115610968576109676107e9565b5b61097484828501610906565b91505092915050565b6000819050919050565b6109908161097d565b82525050565b60006020820190506109ab6000830184610987565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109dc826109b1565b9050919050565b6109ec816109d1565b81146109f757600080fd5b50565b600081359050610a09816109e3565b92915050565b600060208284031215610a2557610a246107e4565b5b6000610a33848285016109fa565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a76578082015181840152602081019050610a5b565b60008484015250505050565b6000610a8d82610a3c565b610a978185610a47565b9350610aa7818560208601610a58565b610ab0816107f8565b840191505092915050565b60006020820190508181036000830152610ad58184610a82565b905092915050565b610ae68161097d565b8114610af157600080fd5b50565b600081359050610b0381610add565b92915050565b600060208284031215610b1f57610b1e6107e4565b5b6000610b2d84828501610af4565b91505092915050565b60008060408385031215610b4d57610b4c6107e4565b5b600083013567ffffffffffffffff811115610b6b57610b6a6107e9565b5b610b7785828601610906565b925050602083013567ffffffffffffffff811115610b9857610b976107e9565b5b610ba485828601610906565b9150509250929050565b600067ffffffffffffffff821115610bc957610bc8610809565b5b610bd2826107f8565b9050602081019050919050565b6000610bf2610bed84610bae565b610869565b905082815260208101848484011115610c0e57610c0d6107f3565b5b610c198482856108b5565b509392505050565b600082601f830112610c3657610c356107ee565b5b8135610c46848260208601610bdf565b91505092915050565b600060208284031215610c6557610c646107e4565b5b600082013567ffffffffffffffff811115610c8357610c826107e9565b5b610c8f84828501610c21565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d018261097d565b9150610d0c8361097d565b9250828201905080821115610d2457610d23610cc7565b5b92915050565b6000610d358261097d565b9150610d408361097d565b9250828202610d4e8161097d565b91508282048414831517610d6557610d64610cc7565b5b5092915050565b6000610d778261097d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610da957610da8610cc7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610dee8261097d565b9150610df98361097d565b925082610e0957610e08610db4565b5b828204905092915050565b6000610e1f8261097d565b9150610e2a8361097d565b9250828203905081811115610e4257610e41610cc7565b5b92915050565b6000610e538261097d565b9150610e5e8361097d565b925082610e6e57610e6d610db4565b5b828206905092915050565b600081905092915050565b6000610e8f82610a3c565b610e998185610e79565b9350610ea9818560208601610a58565b80840191505092915050565b6000610ec18285610e84565b9150610ecd8284610e84565b91508190509392505050565b7f3078000000000000000000000000000000000000000000000000000000000000600082015250565b6000610f0f600283610e79565b9150610f1a82610ed9565b600282019050919050565b6000610f3082610f02565b9150610f3c8284610e84565b915081905092915050565b600060ff82169050919050565b6000610f5f82610f47565b9150610f6a83610f47565b9250828201905060ff811115610f8357610f82610cc7565b5b9291505056fea26469706673582212209cb19885fea7475e499d275bfc0e3f7ceef135bf92229018a1f2ef321658eb6664736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "concat(string,string)": {
        "params": {
          "_s1": "The first string",
          "_s2": "The second string"
        },
        "returns": {
          "_0": "res The resultant string created by merging s1 and s2"
        }
      },
      "length(string)": {
        "params": {
          "_s": "Input string"
        },
        "returns": {
          "_0": "res The lenght of the string"
        }
      },
      "toHexString(bytes)": {
        "params": {
          "_bytes": "Input bytes"
        },
        "returns": {
          "_0": "res Input bytes in a string format with '0x' prefix"
        }
      },
      "toString(address)": {
        "params": {
          "_addr": "The Ethereum address to convert"
        },
        "returns": {
          "_0": "res The string representation of the Ethereum address, including the '0x' prefix"
        }
      },
      "toString(uint256)": {
        "params": {
          "_x": "Input number"
        },
        "returns": {
          "_0": "res Number represented as a string"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "concat(string,string)": {
        "notice": "Combines two input strings into one"
      },
      "length(string)": {
        "notice": "Gets length of the string"
      },
      "toHexString(bytes)": {
        "notice": "Converts Solidity bytes to a string"
      },
      "toString(address)": {
        "notice": "Converts an Ethereum address to a string Note: only lowercase letters are used"
      },
      "toString(uint256)": {
        "notice": "Converts a `uint256` to its ASCII `string` decimal representationInspired by OraclizeAPI's implementation - MIT licence https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol"
      }
    },
    "notice": "Enhances operation with strings that are not possible in the current Solidity version (v0.8.18)",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}