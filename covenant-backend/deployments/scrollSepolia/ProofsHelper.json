{
  "address": "0xDb04110AdbA966fA6Ce95975B940fA85E8D024EB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        }
      ],
      "name": "generateSignersJSON",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_proofOfAuthorityCID",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_proofsOfSignatureCID",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getProofOfAgreementData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proofsMetadata",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_agreementFileCID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getProofOfAuthorityData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_agreementFileCID",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getProofOfAuthorityDataMessage",
      "outputs": [
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_data",
          "type": "string"
        }
      ],
      "name": "getProofOfAuthorityOrSignature",
      "outputs": [
        {
          "internalType": "string",
          "name": "_proof",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proofsMetadata",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_proofOfAuthorityCID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getProofOfSignatureData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_proofOfAuthorityCID",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getProofOfSignatureDataMessage",
      "outputs": [
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x6462353333e484150bdcba5c3ef7cf98a9612912a50bb51ed8e68f8ff3dcb141",
  "receipt": {
    "to": null,
    "from": "0xde358FCcA54Fa226aE16Ac3927487260dAfc3835",
    "contractAddress": "0xDb04110AdbA966fA6Ce95975B940fA85E8D024EB",
    "transactionIndex": 1,
    "gasUsed": "2735163",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x6583bb55c6438c55178751d3c998ff078dace816b472afaf6292a659e8c5692d",
    "transactionHash": "0x6462353333e484150bdcba5c3ef7cf98a9612912a50bb51ed8e68f8ff3dcb141",
    "logs": [],
    "blockNumber": 3006145,
    "cumulativeGasUsed": "2864651",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e03c71885da52b71bfb59f715f690cfe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"}],\"name\":\"generateSignersJSON\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_proofOfAuthorityCID\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_proofsOfSignatureCID\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getProofOfAgreementData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proofsMetadata\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_agreementFileCID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getProofOfAuthorityData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_agreementFileCID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getProofOfAuthorityDataMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"getProofOfAuthorityOrSignature\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_proof\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proofsMetadata\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_proofOfAuthorityCID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getProofOfSignatureData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_proofOfAuthorityCID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getProofOfSignatureDataMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"generateSignersJSON(address[])\":{\"params\":{\"_signers\":\"Array of signers of the agreement\"},\"returns\":{\"_0\":\"res JSON stringified list of signers\"}},\"getProofOfAgreementData(string,string[],uint256)\":{\"params\":{\"_proofOfAuthorityCID\":\"IPFS CID of the Proof-of-Authority\",\"_proofsOfSignatureCID\":\"Array of IPFS CID of every Proof-of-Signature from the agreement\",\"_timestamp\":\"Timestamp of the proof\"},\"returns\":{\"_0\":\"data Proof-of-Agreement data\"}},\"getProofOfAuthorityData(address,address,address[],string,string,uint256)\":{\"params\":{\"_agreementFileCID\":\"IPFS CID of the agreement file\",\"_creator\":\"Creator of the agreement\",\"_proofsMetadata\":\"EIP712 part of the proof data defined in ProofsMetadata smart contract\",\"_signers\":\"Signers of the agreement\",\"_timestamp\":\"Timestamp of the proof\",\"_version\":\"EIP712 version of the data\"},\"returns\":{\"_0\":\"data Proof-of-Authority data\"}},\"getProofOfAuthorityDataMessage(address,address[],string,uint256)\":{\"params\":{\"_agreementFileCID\":\"IPFS CID of the agreement file\",\"_creator\":\"Agreement creator address\",\"_signers\":\"Array of signers of the agreement\"},\"returns\":{\"_message\":\"Proof-of-Authority message to sign\"}},\"getProofOfAuthorityOrSignature(address,bytes,string)\":{\"params\":{\"_creator\":\"Creator of the proof\",\"_data\":\"Data that the user have signed\",\"_signature\":\"Signature of the proof data\"},\"returns\":{\"_proof\":\"The proof object as a string\"}},\"getProofOfSignatureData(address,address,string,string,uint256)\":{\"params\":{\"_proofOfAuthorityCID\":\"IPFS CID of the Proof-of-Authority\",\"_proofsMetadata\":\"EIP712 part of the proof data defined in ProofsMetadata smart contract\",\"_signer\":\"Current signer of the agreement from the list of agreement signers\",\"_timestamp\":\"Timestamp of the proof\",\"_version\":\"EIP712 version of the data\"},\"returns\":{\"_0\":\"data Proof-of-Signature data\"}},\"getProofOfSignatureDataMessage(address,string,uint256)\":{\"params\":{\"_proofOfAuthorityCID\":\"IPFS CID of the Proof-of-Authority\",\"_signer\":\"Current signer of the agreement from the list of agreement signers\",\"_timestamp\":\"Timestamp of the proof\"},\"returns\":{\"_message\":\"Proof-of-Authority message to sign\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"generateSignersJSON(address[])\":{\"notice\":\"Generates a JSON stringified content with signers of the agreement\"},\"getProofOfAgreementData(string,string[],uint256)\":{\"notice\":\"Returns Proof-of-Agreement data that is equal to Proof-of-Agreement as it requires no signature\"},\"getProofOfAuthorityData(address,address,address[],string,string,uint256)\":{\"notice\":\"Returns Proof-of-Authority data for the creator to sign\"},\"getProofOfAuthorityDataMessage(address,address[],string,uint256)\":{\"notice\":\"Returns the core message (without EIP712 metadata) of Proof-of-Authority for the creator to sign\"},\"getProofOfAuthorityOrSignature(address,bytes,string)\":{\"notice\":\"Returns full Proof-of-Authority or Proof-of-Signature (data with signature)\"},\"getProofOfSignatureData(address,address,string,string,uint256)\":{\"notice\":\"Returns Proof-of-Signature data for the signer to sign\"},\"getProofOfSignatureDataMessage(address,string,uint256)\":{\"notice\":\"Returns the core message (without EIP712 metadata) of Proof-of-Signature for the signer to sign\"}},\"notice\":\"ProofsHelper library helps Proofs smart contract to generate Proof-of-Authority, Proof-of-Signature, and Proof-of-Agreement in a text format\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libs/ProofsHelper.sol\":\"ProofsHelper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IProofMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport { ProofTypes } from '../libs/common/ProofTypes.sol';\\r\\n\\r\\ninterface IProofsMetadata {\\r\\n    event MetadataAdded(ProofTypes.Proofs proof, string indexed version, bytes metadata);\\r\\n    event MetadataUpdated(ProofTypes.Proofs proof, string indexed version, bytes metadata);\\r\\n\\r\\n    function proofsMetadata(\\r\\n        ProofTypes.Proofs _type,\\r\\n        string calldata _version\\r\\n    ) external view returns (bytes memory);\\r\\n\\r\\n    function metadataVersions(\\r\\n        ProofTypes.Proofs _type,\\r\\n        uint256 index\\r\\n    ) external view returns (string memory);\\r\\n\\r\\n    function getMetadataNumOfVersions(ProofTypes.Proofs _type) external view returns (uint256);\\r\\n\\r\\n    function addMetadata(\\r\\n        ProofTypes.Proofs _type,\\r\\n        string calldata _version,\\r\\n        bytes calldata _metadata\\r\\n    ) external;\\r\\n\\r\\n    function forceUpdateMetadata(\\r\\n        ProofTypes.Proofs _type,\\r\\n        string calldata _version,\\r\\n        bytes calldata _metadata\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0xa4b02172e8de9ec660c3b27761c94dff8730702c7b3648d00d5695d6cd69074a\",\"license\":\"UNLICENSED\"},\"contracts/libs/ProofsHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport { ProofTypes } from './common/ProofTypes.sol';\\r\\nimport { StringsExpanded } from './StringsExpanded.sol';\\r\\nimport { IProofsMetadata } from '../interfaces/IProofMetadata.sol';\\r\\n\\r\\n/**\\r\\n * ProofsHelper library helps Proofs smart contract to generate Proof-of-Authority, Proof-of-Signature, and\\r\\n * Proof-of-Agreement in a text format\\r\\n */\\r\\nlibrary ProofsHelper {\\r\\n    using StringsExpanded for string;\\r\\n    using StringsExpanded for bytes;\\r\\n    using StringsExpanded for address;\\r\\n    using StringsExpanded for uint256;\\r\\n\\r\\n    /**\\r\\n     * Returns full Proof-of-Authority or Proof-of-Signature (data with signature)\\r\\n     * @param _creator Creator of the proof\\r\\n     * @param _signature Signature of the proof data\\r\\n     * @param _data Data that the user have signed\\r\\n     * @return _proof The proof object as a string\\r\\n     */\\r\\n    function getProofOfAuthorityOrSignature(\\r\\n        address _creator,\\r\\n        bytes calldata _signature,\\r\\n        string memory _data\\r\\n    ) external pure returns (string memory _proof) {\\r\\n        require(_creator != address(0), 'No creator');\\r\\n        require(_signature.length > 0, 'No signature');\\r\\n        require(_data.length() > 0, 'No data');\\r\\n        _proof = string(\\r\\n            abi.encodePacked(\\r\\n                '{\\\"address\\\":\\\"',\\r\\n                _creator.toString(),\\r\\n                '\\\",\\\"sig\\\":\\\"',\\r\\n                _signature.toHexString(),\\r\\n                '\\\",\\\"data\\\":',\\r\\n                _data,\\r\\n                '}'\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns Proof-of-Authority data for the creator to sign\\r\\n     * @param _proofsMetadata EIP712 part of the proof data defined in ProofsMetadata smart contract\\r\\n     * @param _creator Creator of the agreement\\r\\n     * @param _signers Signers of the agreement\\r\\n     * @param _agreementFileCID IPFS CID of the agreement file\\r\\n     * @param _version EIP712 version of the data\\r\\n     * @param _timestamp Timestamp of the proof\\r\\n     * @return data Proof-of-Authority data\\r\\n     */\\r\\n    function getProofOfAuthorityData(\\r\\n        address _proofsMetadata,\\r\\n        address _creator,\\r\\n        address[] calldata _signers,\\r\\n        string calldata _agreementFileCID,\\r\\n        string calldata _version,\\r\\n        uint256 _timestamp\\r\\n    ) external view returns (string memory) {\\r\\n        require(_creator != address(0), 'No creator');\\r\\n        require(_signers.length > 0, 'No signers');\\r\\n        require(_agreementFileCID.length() > 0, 'No Agreement File CID');\\r\\n        require(_version.length() > 0, 'No version');\\r\\n\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    IProofsMetadata(_proofsMetadata).proofsMetadata(\\r\\n                        ProofTypes.Proofs.ProofOfAuthority,\\r\\n                        _version\\r\\n                    ),\\r\\n                    ',\\\"message\\\":',\\r\\n                    getProofOfAuthorityDataMessage(\\r\\n                        _creator,\\r\\n                        _signers,\\r\\n                        _agreementFileCID,\\r\\n                        _timestamp\\r\\n                    ),\\r\\n                    '}'\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns Proof-of-Signature data for the signer to sign\\r\\n     * @param _proofsMetadata EIP712 part of the proof data defined in ProofsMetadata smart contract\\r\\n     * @param _signer Current signer of the agreement from the list of agreement signers\\r\\n     * @param _proofOfAuthorityCID IPFS CID of the Proof-of-Authority\\r\\n     * @param _version EIP712 version of the data\\r\\n     * @param _timestamp Timestamp of the proof\\r\\n     * @return data Proof-of-Signature data\\r\\n     */\\r\\n    function getProofOfSignatureData(\\r\\n        address _proofsMetadata,\\r\\n        address _signer,\\r\\n        string calldata _proofOfAuthorityCID,\\r\\n        string calldata _version,\\r\\n        uint256 _timestamp\\r\\n    ) external view returns (string memory) {\\r\\n        require(_signer != address(0), 'No signer');\\r\\n        require(_proofOfAuthorityCID.length() > 0, 'No Proof-of-Authority CID');\\r\\n        require(_version.length() > 0, 'No version');\\r\\n\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    IProofsMetadata(_proofsMetadata).proofsMetadata(\\r\\n                        ProofTypes.Proofs.ProofOfSignature,\\r\\n                        _version\\r\\n                    ),\\r\\n                    ',\\\"message\\\":',\\r\\n                    getProofOfSignatureDataMessage(_signer, _proofOfAuthorityCID, _timestamp),\\r\\n                    '}'\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns Proof-of-Agreement data that is equal to Proof-of-Agreement as it requires no\\r\\n     * signature\\r\\n     * @param _proofOfAuthorityCID IPFS CID of the Proof-of-Authority\\r\\n     * @param _proofsOfSignatureCID Array of IPFS CID of every Proof-of-Signature from the agreement\\r\\n     * @param _timestamp Timestamp of the proof\\r\\n     * @return data Proof-of-Agreement data\\r\\n     */\\r\\n    function getProofOfAgreementData(\\r\\n        string calldata _proofOfAuthorityCID,\\r\\n        string[] calldata _proofsOfSignatureCID,\\r\\n        uint256 _timestamp\\r\\n    ) external pure returns (string memory) {\\r\\n        require(_proofOfAuthorityCID.length() > 0, 'No Proof-of-Authority CID');\\r\\n        for (uint256 i = 0; i < _proofsOfSignatureCID.length; i++) {\\r\\n            require(_proofsOfSignatureCID[i].length() > 0, 'No Proof-of-Signature CID');\\r\\n        }\\r\\n\\r\\n        string memory arrOfPoSigs = '{\\\"proofCID\\\":\\\"';\\r\\n        for (uint256 i = 0; i < _proofsOfSignatureCID.length; i++) {\\r\\n            if (i != _proofsOfSignatureCID.length - 1) {\\r\\n                arrOfPoSigs = string(\\r\\n                    abi.encodePacked(arrOfPoSigs, _proofsOfSignatureCID[i], '\\\"},{\\\"proofCID\\\":\\\"')\\r\\n                );\\r\\n            } else {\\r\\n                // the last proofCID\\r\\n                arrOfPoSigs = string(\\r\\n                    abi.encodePacked(arrOfPoSigs, _proofsOfSignatureCID[i], '\\\"}]')\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    '{\\\"agreementFileProofCID\\\":\\\"',\\r\\n                    _proofOfAuthorityCID,\\r\\n                    '\\\",\\\"agreementSignProofs\\\":[',\\r\\n                    arrOfPoSigs,\\r\\n                    ',\\\"timestamp\\\":',\\r\\n                    _timestamp.toString(),\\r\\n                    '}'\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the core message (without EIP712 metadata) of Proof-of-Authority for the creator to\\r\\n     * sign\\r\\n     * @param _creator Agreement creator address\\r\\n     * @param _signers Array of signers of the agreement\\r\\n     * @param _agreementFileCID IPFS CID of the agreement file\\r\\n     * @return _message Proof-of-Authority message to sign\\r\\n     */\\r\\n    function getProofOfAuthorityDataMessage(\\r\\n        address _creator,\\r\\n        address[] calldata _signers,\\r\\n        string calldata _agreementFileCID,\\r\\n        uint256 _timestamp\\r\\n    ) public pure returns (string memory _message) {\\r\\n        _message = string(\\r\\n            abi.encodePacked(\\r\\n                '{\\\"name\\\":\\\"Proof-of-Authority\\\",\\\"from\\\":\\\"',\\r\\n                _creator.toString(),\\r\\n                '\\\",\\\"agreementFileCID\\\":\\\"',\\r\\n                _agreementFileCID,\\r\\n                '\\\",\\\"signers\\\":',\\r\\n                generateSignersJSON(_signers),\\r\\n                ',\\\"app\\\":\\\"daosign\\\",\\\"timestamp\\\":',\\r\\n                _timestamp.toString(),\\r\\n                ',\\\"metadata\\\":\\\"{}\\\"}'\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the core message (without EIP712 metadata) of Proof-of-Signature for the signer to\\r\\n     * sign\\r\\n     * @param _signer Current signer of the agreement from the list of agreement signers\\r\\n     * @param _proofOfAuthorityCID IPFS CID of the Proof-of-Authority\\r\\n     * @param _timestamp Timestamp of the proof\\r\\n     * @return _message Proof-of-Authority message to sign\\r\\n     */\\r\\n    function getProofOfSignatureDataMessage(\\r\\n        address _signer,\\r\\n        string calldata _proofOfAuthorityCID,\\r\\n        uint256 _timestamp\\r\\n    ) public pure returns (string memory _message) {\\r\\n        _message = string(\\r\\n            abi.encodePacked(\\r\\n                '{\\\"signer\\\":\\\"',\\r\\n                _signer.toString(),\\r\\n                '\\\",\\\"agreementFileProofCID\\\":\\\"',\\r\\n                _proofOfAuthorityCID,\\r\\n                '\\\",\\\"app\\\":\\\"daosign\\\",\\\"timestamp\\\":',\\r\\n                _timestamp.toString(),\\r\\n                ',\\\"metadata\\\":{}}'\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Generates a JSON stringified content with signers of the agreement\\r\\n     * @param _signers Array of signers of the agreement\\r\\n     * @return res JSON stringified list of signers\\r\\n     */\\r\\n    function generateSignersJSON(address[] calldata _signers) public pure returns (string memory) {\\r\\n        string memory res = '[';\\r\\n\\r\\n        for (uint256 i = 0; i < _signers.length; i++) {\\r\\n            res = res.concat(\\r\\n                string(abi.encodePacked('{\\\"addr\\\":\\\"', _signers[i].toString(), '\\\",\\\"metadata\\\":\\\"{}\\\"}'))\\r\\n            );\\r\\n            if (i != _signers.length - 1) {\\r\\n                res = res.concat(',');\\r\\n            }\\r\\n        }\\r\\n\\r\\n        res = res.concat(']');\\r\\n\\r\\n        return res;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x649e6ec5f79cfcf52df259b6ad6a3ce274135f9d686475efc0956eff8dc45dbc\",\"license\":\"UNLICENSED\"},\"contracts/libs/StringsExpanded.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n/**\\r\\n * Enhances operation with strings that are not possible in the current Solidity version (v0.8.18)\\r\\n */\\r\\nlibrary StringsExpanded {\\r\\n    /**\\r\\n     * @dev Compares two strings\\r\\n     * @param _s1 One string\\r\\n     * @param _s2 Another string\\r\\n     * @return Are string equal\\r\\n     */\\r\\n    function equal(string memory _s1, string memory _s2) internal pure returns (bool) {\\r\\n        return keccak256(abi.encodePacked(_s1)) == keccak256(abi.encodePacked(_s2));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Gets length of the string\\r\\n     * @param _s Input string\\r\\n     * @return res The lenght of the string\\r\\n     */\\r\\n    function length(string memory _s) public pure returns (uint256) {\\r\\n        return bytes(_s).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Combines two input strings into one\\r\\n     * @param _s1 The first string\\r\\n     * @param _s2 The second string\\r\\n     * @return res The resultant string created by merging s1 and s2\\r\\n     */\\r\\n    function concat(string memory _s1, string memory _s2) public pure returns (string memory) {\\r\\n        return string(abi.encodePacked(_s1, _s2));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Converts a `uint256` to its ASCII `string` decimal representation\\r\\n     * @notice Inspired by OraclizeAPI's implementation - MIT licence\\r\\n     * https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n     * @param _x Input number\\r\\n     * @return res Number represented as a string\\r\\n     */\\r\\n    function toString(uint256 _x) public pure returns (string memory) {\\r\\n        if (_x == 0) {\\r\\n            return '0';\\r\\n        }\\r\\n        uint256 _temp = _x;\\r\\n        uint256 _digits;\\r\\n        while (_temp != 0) {\\r\\n            _digits++;\\r\\n            _temp /= 10;\\r\\n        }\\r\\n        bytes memory _buffer = new bytes(_digits);\\r\\n        while (_x != 0) {\\r\\n            _digits -= 1;\\r\\n            _buffer[_digits] = bytes1(uint8(48 + uint256(_x % 10)));\\r\\n            _x /= 10;\\r\\n        }\\r\\n        return string(_buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Converts an Ethereum address to a string\\r\\n     * Note: only lowercase letters are used\\r\\n     * @param _addr The Ethereum address to convert\\r\\n     * @return res The string representation of the Ethereum address, including the '0x' prefix\\r\\n     */\\r\\n    function toString(address _addr) public pure returns (string memory) {\\r\\n        bytes32 _bytes = bytes32(uint256(uint160(_addr)));\\r\\n        bytes memory HEX = '0123456789abcdef';\\r\\n        bytes memory str = new bytes(42);\\r\\n        str[0] = '0';\\r\\n        str[1] = 'x';\\r\\n        for (uint i = 0; i < 20; i++) {\\r\\n            str[i * 2 + 2] = HEX[uint8(_bytes[i + 12] >> 4)];\\r\\n            str[i * 2 + 3] = HEX[uint8(_bytes[i + 12] & 0x0f)];\\r\\n        }\\r\\n        return string(str);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Converts Solidity bytes to a string\\r\\n     * @param _bytes Input bytes\\r\\n     * @return res Input bytes in a string format with '0x' prefix\\r\\n     */\\r\\n    function toHexString(bytes memory _bytes) public pure returns (string memory) {\\r\\n        bytes memory hexString = new bytes(_bytes.length * 2);\\r\\n\\r\\n        uint256 index = 0;\\r\\n        for (uint256 i = 0; i < _bytes.length; i++) {\\r\\n            uint256 value = uint256(uint8(_bytes[i]));\\r\\n\\r\\n            bytes1 highNibble = bytes1(uint8((value & 0xf0) >> 4));\\r\\n            bytes1 lowNibble = bytes1(uint8(value & 0x0f));\\r\\n\\r\\n            hexString[index++] = charToHex(highNibble);\\r\\n            hexString[index++] = charToHex(lowNibble);\\r\\n        }\\r\\n\\r\\n        return string(abi.encodePacked('0x', string(hexString)));\\r\\n    }\\r\\n\\r\\n    function charToHex(bytes1 _char) private pure returns (bytes1) {\\r\\n        if (uint8(_char) < 10) {\\r\\n            return bytes1(uint8(_char) + 0x30); // '0' to '9'\\r\\n        } else {\\r\\n            return bytes1(uint8(_char) + 0x57); // 'a' to 'f'\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xb3480132ce0f48ca9c7e33005afc117d2d268aad436fc867ed1d2d8e705cb6ac\",\"license\":\"UNLICENSED\"},\"contracts/libs/common/ProofTypes.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary ProofTypes {\\r\\n    enum Proofs {\\r\\n        ProofOfAuthority,\\r\\n        ProofOfSignature,\\r\\n        ProofOfAgreement\\r\\n    }\\r\\n}\",\"keccak256\":\"0xcdfb33e32fff9df02977629858f58c1215e7e54e13a99f323f4d8e960c3d1571\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6130bb610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100875760003560e01c80638215686a116100655780638215686a1461011c5780638f630b701461014c5780639c9b03da1461017c578063ad0bf357146101ac57610087565b806309e094191461008c578063267cb9e7146100bc57806346c74e72146100ec575b600080fd5b6100a660048036038101906100a19190611566565b6101dc565b6040516100b39190611643565b60405180910390f35b6100d660048036038101906100d1919061174f565b6104ba565b6040516100e39190611643565b60405180910390f35b6101066004803603810190610101919061197c565b61060b565b6040516101139190611643565b60405180910390f35b61013660048036038101906101319190611a62565b610902565b6040516101439190611643565b60405180910390f35b61016660048036038101906101619190611af7565b610d03565b6040516101739190611643565b60405180910390f35b61019660048036038101906101919190611bb3565b611031565b6040516101a39190611643565b60405180910390f35b6101c660048036038101906101c19190611c27565b611175565b6040516101d39190611643565b60405180910390f35b606060006040518060400160405280600181526020017f5b00000000000000000000000000000000000000000000000000000000000000815250905060005b8484905081101561042e578173377662a8588c20Bf94B3b5685d096FE1CdF70Ef66389c19ddb909187878581811061025657610255611d16565b5b905060200201602081019061026b9190611d45565b73ffffffffffffffffffffffffffffffffffffffff1673377662a8588c20Bf94B3b5685d096FE1CdF70Ef66356ca623e90916040518263ffffffff1660e01b81526004016102b99190611d81565b600060405180830381865af41580156102d6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102ff9190611e0c565b60405160200161030f9190611f29565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161033b929190611f56565b600060405180830381865af4158015610358573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103819190611e0c565b91506001858590506103939190611fbc565b811461041b578173377662a8588c20Bf94B3b5685d096FE1CdF70Ef66389c19ddb90916040518263ffffffff1660e01b81526004016103d2919061203c565b600060405180830381865af41580156103ef573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104189190611e0c565b91505b808061042690612071565b91505061021b565b508073377662a8588c20Bf94B3b5685d096FE1CdF70Ef66389c19ddb90916040518263ffffffff1660e01b81526004016104689190612105565b600060405180830381865af4158015610485573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104ae9190611e0c565b90508091505092915050565b60608673ffffffffffffffffffffffffffffffffffffffff1673377662a8588c20Bf94B3b5685d096FE1CdF70Ef66356ca623e90916040518263ffffffff1660e01b815260040161050b9190611d81565b600060405180830381865af4158015610528573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105519190611e0c565b848461055d89896101dc565b8573377662a8588c20Bf94B3b5685d096FE1CdF70Ef6636900a3ae90916040518263ffffffff1660e01b81526004016105969190612149565b600060405180830381865af41580156105b3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105dc9190611e0c565b6040516020016105f095949392919061232b565b60405160208183030381529060405290509695505050505050565b6060600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361067c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610673906123ff565b60405180910390fd5b600084849050116106c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b99061246b565b60405180910390fd5b60008273377662a8588c20Bf94B3b5685d096FE1CdF70Ef663436a66e790916040518263ffffffff1660e01b81526004016106fd9190611643565b602060405180830381865af415801561071a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073e91906124a0565b1161077e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077590612519565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1673377662a8588c20Bf94B3b5685d096FE1CdF70Ef66356ca623e90916040518263ffffffff1660e01b81526004016107cd9190611d81565b600060405180830381865af41580156107ea573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108139190611e0c565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505073377662a8588c20Bf94B3b5685d096FE1CdF70Ef663c937279390916040518263ffffffff1660e01b8152600401610890919061258e565b600060405180830381865af41580156108ad573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108d69190611e0c565b836040516020016108e9939291906126e0565b6040516020818303038152906040529050949350505050565b6060600086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505073377662a8588c20Bf94B3b5685d096FE1CdF70Ef663436a66e790916040518263ffffffff1660e01b81526004016109839190611643565b602060405180830381865af41580156109a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c491906124a0565b11610a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fb90612789565b60405180910390fd5b60005b84849050811015610b48576000858583818110610a2757610a26611d16565b5b9050602002810190610a3991906127b8565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505073377662a8588c20Bf94B3b5685d096FE1CdF70Ef663436a66e790916040518263ffffffff1660e01b8152600401610ab49190611643565b602060405180830381865af4158015610ad1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af591906124a0565b11610b35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2c90612867565b60405180910390fd5b8080610b4090612071565b915050610a07565b5060006040518060400160405280600d81526020017f7b2270726f6f66434944223a2200000000000000000000000000000000000000815250905060005b85859050811015610c5257600186869050610ba19190611fbc565b8114610bf55781868683818110610bbb57610bba611d16565b5b9050602002810190610bcd91906127b8565b604051602001610bdf939291906128d3565b6040516020818303038152906040529150610c3f565b81868683818110610c0957610c08611d16565b5b9050602002810190610c1b91906127b8565b604051602001610c2d93929190612950565b60405160208183030381529060405291505b8080610c4a90612071565b915050610b86565b508686828573377662a8588c20Bf94B3b5685d096FE1CdF70Ef6636900a3ae90916040518263ffffffff1660e01b8152600401610c8f9190612149565b600060405180830381865af4158015610cac573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610cd59190611e0c565b604051602001610ce89493929190612a65565b60405160208183030381529060405291505095945050505050565b6060600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1603610d74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6b90612b10565b60405180910390fd5b600086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505073377662a8588c20Bf94B3b5685d096FE1CdF70Ef663436a66e790916040518263ffffffff1660e01b8152600401610df39190611643565b602060405180830381865af4158015610e10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3491906124a0565b11610e74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6b90612789565b60405180910390fd5b600084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505073377662a8588c20Bf94B3b5685d096FE1CdF70Ef663436a66e790916040518263ffffffff1660e01b8152600401610ef39190611643565b602060405180830381865af4158015610f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3491906124a0565b11610f74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6b90612b7c565b60405180910390fd5b8773ffffffffffffffffffffffffffffffffffffffff16636a22ee80600186866040518463ffffffff1660e01b8152600401610fb293929190612c40565b600060405180830381865afa158015610fcf573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ff89190612d13565b61100488888886611031565b604051602001611015929190612de4565b6040516020818303038152906040529050979650505050505050565b60608473ffffffffffffffffffffffffffffffffffffffff1673377662a8588c20Bf94B3b5685d096FE1CdF70Ef66356ca623e90916040518263ffffffff1660e01b81526004016110829190611d81565b600060405180830381865af415801561109f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110c89190611e0c565b84848473377662a8588c20Bf94B3b5685d096FE1CdF70Ef6636900a3ae90916040518263ffffffff1660e01b81526004016111039190612149565b600060405180830381865af4158015611120573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111499190611e0c565b60405160200161115c9493929190612f4e565b6040516020818303038152906040529050949350505050565b6060600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16036111e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111dd906123ff565b60405180910390fd5b6000888890501161122c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122390612ff9565b60405180910390fd5b600086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505073377662a8588c20Bf94B3b5685d096FE1CdF70Ef663436a66e790916040518263ffffffff1660e01b81526004016112ab9190611643565b602060405180830381865af41580156112c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ec91906124a0565b1161132c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132390613065565b60405180910390fd5b600084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505073377662a8588c20Bf94B3b5685d096FE1CdF70Ef663436a66e790916040518263ffffffff1660e01b81526004016113ab9190611643565b602060405180830381865af41580156113c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ec91906124a0565b1161142c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142390612b7c565b60405180910390fd5b8973ffffffffffffffffffffffffffffffffffffffff16636a22ee80600086866040518463ffffffff1660e01b815260040161146a93929190612c40565b600060405180830381865afa158015611487573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906114b09190612d13565b6114be8a8a8a8a8a886104ba565b6040516020016114cf929190612de4565b60405160208183030381529060405290509998505050505050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261152657611525611501565b5b8235905067ffffffffffffffff81111561154357611542611506565b5b60208301915083602082028301111561155f5761155e61150b565b5b9250929050565b6000806020838503121561157d5761157c6114f7565b5b600083013567ffffffffffffffff81111561159b5761159a6114fc565b5b6115a785828601611510565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156115ed5780820151818401526020810190506115d2565b60008484015250505050565b6000601f19601f8301169050919050565b6000611615826115b3565b61161f81856115be565b935061162f8185602086016115cf565b611638816115f9565b840191505092915050565b6000602082019050818103600083015261165d818461160a565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061169082611665565b9050919050565b6116a081611685565b81146116ab57600080fd5b50565b6000813590506116bd81611697565b92915050565b60008083601f8401126116d9576116d8611501565b5b8235905067ffffffffffffffff8111156116f6576116f5611506565b5b6020830191508360018202830111156117125761171161150b565b5b9250929050565b6000819050919050565b61172c81611719565b811461173757600080fd5b50565b60008135905061174981611723565b92915050565b6000806000806000806080878903121561176c5761176b6114f7565b5b600061177a89828a016116ae565b965050602087013567ffffffffffffffff81111561179b5761179a6114fc565b5b6117a789828a01611510565b9550955050604087013567ffffffffffffffff8111156117ca576117c96114fc565b5b6117d689828a016116c3565b935093505060606117e989828a0161173a565b9150509295509295509295565b60008083601f84011261180c5761180b611501565b5b8235905067ffffffffffffffff81111561182957611828611506565b5b6020830191508360018202830111156118455761184461150b565b5b9250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611889826115f9565b810181811067ffffffffffffffff821117156118a8576118a7611851565b5b80604052505050565b60006118bb6114ed565b90506118c78282611880565b919050565b600067ffffffffffffffff8211156118e7576118e6611851565b5b6118f0826115f9565b9050602081019050919050565b82818337600083830152505050565b600061191f61191a846118cc565b6118b1565b90508281526020810184848401111561193b5761193a61184c565b5b6119468482856118fd565b509392505050565b600082601f83011261196357611962611501565b5b813561197384826020860161190c565b91505092915050565b60008060008060608587031215611996576119956114f7565b5b60006119a4878288016116ae565b945050602085013567ffffffffffffffff8111156119c5576119c46114fc565b5b6119d1878288016117f6565b9350935050604085013567ffffffffffffffff8111156119f4576119f36114fc565b5b611a008782880161194e565b91505092959194509250565b60008083601f840112611a2257611a21611501565b5b8235905067ffffffffffffffff811115611a3f57611a3e611506565b5b602083019150836020820283011115611a5b57611a5a61150b565b5b9250929050565b600080600080600060608688031215611a7e57611a7d6114f7565b5b600086013567ffffffffffffffff811115611a9c57611a9b6114fc565b5b611aa8888289016116c3565b9550955050602086013567ffffffffffffffff811115611acb57611aca6114fc565b5b611ad788828901611a0c565b93509350506040611aea8882890161173a565b9150509295509295909350565b600080600080600080600060a0888a031215611b1657611b156114f7565b5b6000611b248a828b016116ae565b9750506020611b358a828b016116ae565b965050604088013567ffffffffffffffff811115611b5657611b556114fc565b5b611b628a828b016116c3565b9550955050606088013567ffffffffffffffff811115611b8557611b846114fc565b5b611b918a828b016116c3565b93509350506080611ba48a828b0161173a565b91505092959891949750929550565b60008060008060608587031215611bcd57611bcc6114f7565b5b6000611bdb878288016116ae565b945050602085013567ffffffffffffffff811115611bfc57611bfb6114fc565b5b611c08878288016116c3565b93509350506040611c1b8782880161173a565b91505092959194509250565b600080600080600080600080600060c08a8c031215611c4957611c486114f7565b5b6000611c578c828d016116ae565b9950506020611c688c828d016116ae565b98505060408a013567ffffffffffffffff811115611c8957611c886114fc565b5b611c958c828d01611510565b975097505060608a013567ffffffffffffffff811115611cb857611cb76114fc565b5b611cc48c828d016116c3565b955095505060808a013567ffffffffffffffff811115611ce757611ce66114fc565b5b611cf38c828d016116c3565b935093505060a0611d068c828d0161173a565b9150509295985092959850929598565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215611d5b57611d5a6114f7565b5b6000611d69848285016116ae565b91505092915050565b611d7b81611685565b82525050565b6000602082019050611d966000830184611d72565b92915050565b6000611daf611daa846118cc565b6118b1565b905082815260208101848484011115611dcb57611dca61184c565b5b611dd68482856115cf565b509392505050565b600082601f830112611df357611df2611501565b5b8151611e03848260208601611d9c565b91505092915050565b600060208284031215611e2257611e216114f7565b5b600082015167ffffffffffffffff811115611e4057611e3f6114fc565b5b611e4c84828501611dde565b91505092915050565b600081905092915050565b7f7b2261646472223a220000000000000000000000000000000000000000000000600082015250565b6000611e96600983611e55565b9150611ea182611e60565b600982019050919050565b6000611eb7826115b3565b611ec18185611e55565b9350611ed18185602086016115cf565b80840191505092915050565b7f222c226d65746164617461223a227b7d227d0000000000000000000000000000600082015250565b6000611f13601283611e55565b9150611f1e82611edd565b601282019050919050565b6000611f3482611e89565b9150611f408284611eac565b9150611f4b82611f06565b915081905092915050565b60006040820190508181036000830152611f70818561160a565b90508181036020830152611f84818461160a565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fc782611719565b9150611fd283611719565b9250828203905081811115611fea57611fe9611f8d565b5b92915050565b7f2c00000000000000000000000000000000000000000000000000000000000000600082015250565b60006120266001836115be565b915061203182611ff0565b602082019050919050565b60006040820190508181036000830152612056818461160a565b9050818103602083015261206981612019565b905092915050565b600061207c82611719565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036120ae576120ad611f8d565b5b600182019050919050565b7f5d00000000000000000000000000000000000000000000000000000000000000600082015250565b60006120ef6001836115be565b91506120fa826120b9565b602082019050919050565b6000604082019050818103600083015261211f818461160a565b90508181036020830152612132816120e2565b905092915050565b61214381611719565b82525050565b600060208201905061215e600083018461213a565b92915050565b7f7b226e616d65223a2250726f6f662d6f662d417574686f72697479222c22667260008201527f6f6d223a22000000000000000000000000000000000000000000000000000000602082015250565b60006121c0602583611e55565b91506121cb82612164565b602582019050919050565b7f222c2261677265656d656e7446696c65434944223a2200000000000000000000600082015250565b600061220c601683611e55565b9150612217826121d6565b601682019050919050565b600061222e8385611e55565b935061223b8385846118fd565b82840190509392505050565b7f222c227369676e657273223a0000000000000000000000000000000000000000600082015250565b600061227d600c83611e55565b915061228882612247565b600c82019050919050565b7f2c22617070223a2264616f7369676e222c2274696d657374616d70223a000000600082015250565b60006122c9601d83611e55565b91506122d482612293565b601d82019050919050565b7f2c226d65746164617461223a227b7d227d000000000000000000000000000000600082015250565b6000612315601183611e55565b9150612320826122df565b601182019050919050565b6000612336826121b3565b91506123428288611eac565b915061234d826121ff565b915061235a828688612222565b915061236582612270565b91506123718285611eac565b915061237c826122bc565b91506123888284611eac565b915061239382612308565b91508190509695505050505050565b600082825260208201905092915050565b7f4e6f2063726561746f7200000000000000000000000000000000000000000000600082015250565b60006123e9600a836123a2565b91506123f4826123b3565b602082019050919050565b60006020820190508181036000830152612418816123dc565b9050919050565b7f4e6f207369676e61747572650000000000000000000000000000000000000000600082015250565b6000612455600c836123a2565b91506124608261241f565b602082019050919050565b6000602082019050818103600083015261248481612448565b9050919050565b60008151905061249a81611723565b92915050565b6000602082840312156124b6576124b56114f7565b5b60006124c48482850161248b565b91505092915050565b7f4e6f206461746100000000000000000000000000000000000000000000000000600082015250565b60006125036007836123a2565b915061250e826124cd565b602082019050919050565b60006020820190508181036000830152612532816124f6565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061256082612539565b61256a8185612544565b935061257a8185602086016115cf565b612583816115f9565b840191505092915050565b600060208201905081810360008301526125a88184612555565b905092915050565b7f7b2261646472657373223a220000000000000000000000000000000000000000600082015250565b60006125e6600c83611e55565b91506125f1826125b0565b600c82019050919050565b7f222c22736967223a220000000000000000000000000000000000000000000000600082015250565b6000612632600983611e55565b915061263d826125fc565b600982019050919050565b7f222c2264617461223a0000000000000000000000000000000000000000000000600082015250565b600061267e600983611e55565b915061268982612648565b600982019050919050565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b60006126ca600183611e55565b91506126d582612694565b600182019050919050565b60006126eb826125d9565b91506126f78286611eac565b915061270282612625565b915061270e8285611eac565b915061271982612671565b91506127258284611eac565b9150612730826126bd565b9150819050949350505050565b7f4e6f2050726f6f662d6f662d417574686f726974792043494400000000000000600082015250565b60006127736019836123a2565b915061277e8261273d565b602082019050919050565b600060208201905081810360008301526127a281612766565b9050919050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126127d5576127d46127a9565b5b80840192508235915067ffffffffffffffff8211156127f7576127f66127ae565b5b602083019250600182023603831315612813576128126127b3565b5b509250929050565b7f4e6f2050726f6f662d6f662d5369676e61747572652043494400000000000000600082015250565b60006128516019836123a2565b915061285c8261281b565b602082019050919050565b6000602082019050818103600083015261288081612844565b9050919050565b7f227d2c7b2270726f6f66434944223a2200000000000000000000000000000000600082015250565b60006128bd601083611e55565b91506128c882612887565b601082019050919050565b60006128df8286611eac565b91506128ec828486612222565b91506128f7826128b0565b9150819050949350505050565b7f227d5d0000000000000000000000000000000000000000000000000000000000600082015250565b600061293a600383611e55565b915061294582612904565b600382019050919050565b600061295c8286611eac565b9150612969828486612222565b91506129748261292d565b9150819050949350505050565b7f7b2261677265656d656e7446696c6550726f6f66434944223a22000000000000600082015250565b60006129b7601a83611e55565b91506129c282612981565b601a82019050919050565b7f222c2261677265656d656e745369676e50726f6f6673223a5b00000000000000600082015250565b6000612a03601983611e55565b9150612a0e826129cd565b601982019050919050565b7f2c2274696d657374616d70223a00000000000000000000000000000000000000600082015250565b6000612a4f600d83611e55565b9150612a5a82612a19565b600d82019050919050565b6000612a70826129aa565b9150612a7d828688612222565b9150612a88826129f6565b9150612a948285611eac565b9150612a9f82612a42565b9150612aab8284611eac565b9150612ab6826126bd565b915081905095945050505050565b7f4e6f207369676e65720000000000000000000000000000000000000000000000600082015250565b6000612afa6009836123a2565b9150612b0582612ac4565b602082019050919050565b60006020820190508181036000830152612b2981612aed565b9050919050565b7f4e6f2076657273696f6e00000000000000000000000000000000000000000000600082015250565b6000612b66600a836123a2565b9150612b7182612b30565b602082019050919050565b60006020820190508181036000830152612b9581612b59565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110612bdc57612bdb612b9c565b5b50565b6000819050612bed82612bcb565b919050565b6000612bfd82612bdf565b9050919050565b612c0d81612bf2565b82525050565b6000612c1f83856123a2565b9350612c2c8385846118fd565b612c35836115f9565b840190509392505050565b6000604082019050612c556000830186612c04565b8181036020830152612c68818486612c13565b9050949350505050565b600067ffffffffffffffff821115612c8d57612c8c611851565b5b612c96826115f9565b9050602081019050919050565b6000612cb6612cb184612c72565b6118b1565b905082815260208101848484011115612cd257612cd161184c565b5b612cdd8482856115cf565b509392505050565b600082601f830112612cfa57612cf9611501565b5b8151612d0a848260208601612ca3565b91505092915050565b600060208284031215612d2957612d286114f7565b5b600082015167ffffffffffffffff811115612d4757612d466114fc565b5b612d5384828501612ce5565b91505092915050565b600081905092915050565b6000612d7282612539565b612d7c8185612d5c565b9350612d8c8185602086016115cf565b80840191505092915050565b7f2c226d657373616765223a000000000000000000000000000000000000000000600082015250565b6000612dce600b83611e55565b9150612dd982612d98565b600b82019050919050565b6000612df08285612d67565b9150612dfb82612dc1565b9150612e078284611eac565b9150612e12826126bd565b91508190509392505050565b7f7b227369676e6572223a22000000000000000000000000000000000000000000600082015250565b6000612e54600b83611e55565b9150612e5f82612e1e565b600b82019050919050565b7f222c2261677265656d656e7446696c6550726f6f66434944223a220000000000600082015250565b6000612ea0601b83611e55565b9150612eab82612e6a565b601b82019050919050565b7f222c22617070223a2264616f7369676e222c2274696d657374616d70223a0000600082015250565b6000612eec601e83611e55565b9150612ef782612eb6565b601e82019050919050565b7f2c226d65746164617461223a7b7d7d0000000000000000000000000000000000600082015250565b6000612f38600f83611e55565b9150612f4382612f02565b600f82019050919050565b6000612f5982612e47565b9150612f658287611eac565b9150612f7082612e93565b9150612f7d828587612222565b9150612f8882612edf565b9150612f948284611eac565b9150612f9f82612f2b565b915081905095945050505050565b7f4e6f207369676e65727300000000000000000000000000000000000000000000600082015250565b6000612fe3600a836123a2565b9150612fee82612fad565b602082019050919050565b6000602082019050818103600083015261301281612fd6565b9050919050565b7f4e6f2041677265656d656e742046696c65204349440000000000000000000000600082015250565b600061304f6015836123a2565b915061305a82613019565b602082019050919050565b6000602082019050818103600083015261307e81613042565b905091905056fea2646970667358221220d89405edd045d7df8b3ccd643fe33d51c56d3bb9dfe4cc163651e69e8ac09ce764736f6c63430008120033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100875760003560e01c80638215686a116100655780638215686a1461011c5780638f630b701461014c5780639c9b03da1461017c578063ad0bf357146101ac57610087565b806309e094191461008c578063267cb9e7146100bc57806346c74e72146100ec575b600080fd5b6100a660048036038101906100a19190611566565b6101dc565b6040516100b39190611643565b60405180910390f35b6100d660048036038101906100d1919061174f565b6104ba565b6040516100e39190611643565b60405180910390f35b6101066004803603810190610101919061197c565b61060b565b6040516101139190611643565b60405180910390f35b61013660048036038101906101319190611a62565b610902565b6040516101439190611643565b60405180910390f35b61016660048036038101906101619190611af7565b610d03565b6040516101739190611643565b60405180910390f35b61019660048036038101906101919190611bb3565b611031565b6040516101a39190611643565b60405180910390f35b6101c660048036038101906101c19190611c27565b611175565b6040516101d39190611643565b60405180910390f35b606060006040518060400160405280600181526020017f5b00000000000000000000000000000000000000000000000000000000000000815250905060005b8484905081101561042e578173__$010b943296133a43821a132050619653d2$__6389c19ddb909187878581811061025657610255611d16565b5b905060200201602081019061026b9190611d45565b73ffffffffffffffffffffffffffffffffffffffff1673__$010b943296133a43821a132050619653d2$__6356ca623e90916040518263ffffffff1660e01b81526004016102b99190611d81565b600060405180830381865af41580156102d6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102ff9190611e0c565b60405160200161030f9190611f29565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161033b929190611f56565b600060405180830381865af4158015610358573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103819190611e0c565b91506001858590506103939190611fbc565b811461041b578173__$010b943296133a43821a132050619653d2$__6389c19ddb90916040518263ffffffff1660e01b81526004016103d2919061203c565b600060405180830381865af41580156103ef573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104189190611e0c565b91505b808061042690612071565b91505061021b565b508073__$010b943296133a43821a132050619653d2$__6389c19ddb90916040518263ffffffff1660e01b81526004016104689190612105565b600060405180830381865af4158015610485573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104ae9190611e0c565b90508091505092915050565b60608673ffffffffffffffffffffffffffffffffffffffff1673__$010b943296133a43821a132050619653d2$__6356ca623e90916040518263ffffffff1660e01b815260040161050b9190611d81565b600060405180830381865af4158015610528573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105519190611e0c565b848461055d89896101dc565b8573__$010b943296133a43821a132050619653d2$__636900a3ae90916040518263ffffffff1660e01b81526004016105969190612149565b600060405180830381865af41580156105b3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105dc9190611e0c565b6040516020016105f095949392919061232b565b60405160208183030381529060405290509695505050505050565b6060600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361067c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610673906123ff565b60405180910390fd5b600084849050116106c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b99061246b565b60405180910390fd5b60008273__$010b943296133a43821a132050619653d2$__63436a66e790916040518263ffffffff1660e01b81526004016106fd9190611643565b602060405180830381865af415801561071a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073e91906124a0565b1161077e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077590612519565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1673__$010b943296133a43821a132050619653d2$__6356ca623e90916040518263ffffffff1660e01b81526004016107cd9190611d81565b600060405180830381865af41580156107ea573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108139190611e0c565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505073__$010b943296133a43821a132050619653d2$__63c937279390916040518263ffffffff1660e01b8152600401610890919061258e565b600060405180830381865af41580156108ad573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108d69190611e0c565b836040516020016108e9939291906126e0565b6040516020818303038152906040529050949350505050565b6060600086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505073__$010b943296133a43821a132050619653d2$__63436a66e790916040518263ffffffff1660e01b81526004016109839190611643565b602060405180830381865af41580156109a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c491906124a0565b11610a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fb90612789565b60405180910390fd5b60005b84849050811015610b48576000858583818110610a2757610a26611d16565b5b9050602002810190610a3991906127b8565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505073__$010b943296133a43821a132050619653d2$__63436a66e790916040518263ffffffff1660e01b8152600401610ab49190611643565b602060405180830381865af4158015610ad1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af591906124a0565b11610b35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2c90612867565b60405180910390fd5b8080610b4090612071565b915050610a07565b5060006040518060400160405280600d81526020017f7b2270726f6f66434944223a2200000000000000000000000000000000000000815250905060005b85859050811015610c5257600186869050610ba19190611fbc565b8114610bf55781868683818110610bbb57610bba611d16565b5b9050602002810190610bcd91906127b8565b604051602001610bdf939291906128d3565b6040516020818303038152906040529150610c3f565b81868683818110610c0957610c08611d16565b5b9050602002810190610c1b91906127b8565b604051602001610c2d93929190612950565b60405160208183030381529060405291505b8080610c4a90612071565b915050610b86565b508686828573__$010b943296133a43821a132050619653d2$__636900a3ae90916040518263ffffffff1660e01b8152600401610c8f9190612149565b600060405180830381865af4158015610cac573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610cd59190611e0c565b604051602001610ce89493929190612a65565b60405160208183030381529060405291505095945050505050565b6060600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1603610d74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6b90612b10565b60405180910390fd5b600086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505073__$010b943296133a43821a132050619653d2$__63436a66e790916040518263ffffffff1660e01b8152600401610df39190611643565b602060405180830381865af4158015610e10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3491906124a0565b11610e74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6b90612789565b60405180910390fd5b600084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505073__$010b943296133a43821a132050619653d2$__63436a66e790916040518263ffffffff1660e01b8152600401610ef39190611643565b602060405180830381865af4158015610f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3491906124a0565b11610f74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6b90612b7c565b60405180910390fd5b8773ffffffffffffffffffffffffffffffffffffffff16636a22ee80600186866040518463ffffffff1660e01b8152600401610fb293929190612c40565b600060405180830381865afa158015610fcf573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ff89190612d13565b61100488888886611031565b604051602001611015929190612de4565b6040516020818303038152906040529050979650505050505050565b60608473ffffffffffffffffffffffffffffffffffffffff1673__$010b943296133a43821a132050619653d2$__6356ca623e90916040518263ffffffff1660e01b81526004016110829190611d81565b600060405180830381865af415801561109f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110c89190611e0c565b84848473__$010b943296133a43821a132050619653d2$__636900a3ae90916040518263ffffffff1660e01b81526004016111039190612149565b600060405180830381865af4158015611120573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111499190611e0c565b60405160200161115c9493929190612f4e565b6040516020818303038152906040529050949350505050565b6060600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16036111e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111dd906123ff565b60405180910390fd5b6000888890501161122c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122390612ff9565b60405180910390fd5b600086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505073__$010b943296133a43821a132050619653d2$__63436a66e790916040518263ffffffff1660e01b81526004016112ab9190611643565b602060405180830381865af41580156112c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ec91906124a0565b1161132c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132390613065565b60405180910390fd5b600084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505073__$010b943296133a43821a132050619653d2$__63436a66e790916040518263ffffffff1660e01b81526004016113ab9190611643565b602060405180830381865af41580156113c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ec91906124a0565b1161142c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142390612b7c565b60405180910390fd5b8973ffffffffffffffffffffffffffffffffffffffff16636a22ee80600086866040518463ffffffff1660e01b815260040161146a93929190612c40565b600060405180830381865afa158015611487573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906114b09190612d13565b6114be8a8a8a8a8a886104ba565b6040516020016114cf929190612de4565b60405160208183030381529060405290509998505050505050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261152657611525611501565b5b8235905067ffffffffffffffff81111561154357611542611506565b5b60208301915083602082028301111561155f5761155e61150b565b5b9250929050565b6000806020838503121561157d5761157c6114f7565b5b600083013567ffffffffffffffff81111561159b5761159a6114fc565b5b6115a785828601611510565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156115ed5780820151818401526020810190506115d2565b60008484015250505050565b6000601f19601f8301169050919050565b6000611615826115b3565b61161f81856115be565b935061162f8185602086016115cf565b611638816115f9565b840191505092915050565b6000602082019050818103600083015261165d818461160a565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061169082611665565b9050919050565b6116a081611685565b81146116ab57600080fd5b50565b6000813590506116bd81611697565b92915050565b60008083601f8401126116d9576116d8611501565b5b8235905067ffffffffffffffff8111156116f6576116f5611506565b5b6020830191508360018202830111156117125761171161150b565b5b9250929050565b6000819050919050565b61172c81611719565b811461173757600080fd5b50565b60008135905061174981611723565b92915050565b6000806000806000806080878903121561176c5761176b6114f7565b5b600061177a89828a016116ae565b965050602087013567ffffffffffffffff81111561179b5761179a6114fc565b5b6117a789828a01611510565b9550955050604087013567ffffffffffffffff8111156117ca576117c96114fc565b5b6117d689828a016116c3565b935093505060606117e989828a0161173a565b9150509295509295509295565b60008083601f84011261180c5761180b611501565b5b8235905067ffffffffffffffff81111561182957611828611506565b5b6020830191508360018202830111156118455761184461150b565b5b9250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611889826115f9565b810181811067ffffffffffffffff821117156118a8576118a7611851565b5b80604052505050565b60006118bb6114ed565b90506118c78282611880565b919050565b600067ffffffffffffffff8211156118e7576118e6611851565b5b6118f0826115f9565b9050602081019050919050565b82818337600083830152505050565b600061191f61191a846118cc565b6118b1565b90508281526020810184848401111561193b5761193a61184c565b5b6119468482856118fd565b509392505050565b600082601f83011261196357611962611501565b5b813561197384826020860161190c565b91505092915050565b60008060008060608587031215611996576119956114f7565b5b60006119a4878288016116ae565b945050602085013567ffffffffffffffff8111156119c5576119c46114fc565b5b6119d1878288016117f6565b9350935050604085013567ffffffffffffffff8111156119f4576119f36114fc565b5b611a008782880161194e565b91505092959194509250565b60008083601f840112611a2257611a21611501565b5b8235905067ffffffffffffffff811115611a3f57611a3e611506565b5b602083019150836020820283011115611a5b57611a5a61150b565b5b9250929050565b600080600080600060608688031215611a7e57611a7d6114f7565b5b600086013567ffffffffffffffff811115611a9c57611a9b6114fc565b5b611aa8888289016116c3565b9550955050602086013567ffffffffffffffff811115611acb57611aca6114fc565b5b611ad788828901611a0c565b93509350506040611aea8882890161173a565b9150509295509295909350565b600080600080600080600060a0888a031215611b1657611b156114f7565b5b6000611b248a828b016116ae565b9750506020611b358a828b016116ae565b965050604088013567ffffffffffffffff811115611b5657611b556114fc565b5b611b628a828b016116c3565b9550955050606088013567ffffffffffffffff811115611b8557611b846114fc565b5b611b918a828b016116c3565b93509350506080611ba48a828b0161173a565b91505092959891949750929550565b60008060008060608587031215611bcd57611bcc6114f7565b5b6000611bdb878288016116ae565b945050602085013567ffffffffffffffff811115611bfc57611bfb6114fc565b5b611c08878288016116c3565b93509350506040611c1b8782880161173a565b91505092959194509250565b600080600080600080600080600060c08a8c031215611c4957611c486114f7565b5b6000611c578c828d016116ae565b9950506020611c688c828d016116ae565b98505060408a013567ffffffffffffffff811115611c8957611c886114fc565b5b611c958c828d01611510565b975097505060608a013567ffffffffffffffff811115611cb857611cb76114fc565b5b611cc48c828d016116c3565b955095505060808a013567ffffffffffffffff811115611ce757611ce66114fc565b5b611cf38c828d016116c3565b935093505060a0611d068c828d0161173a565b9150509295985092959850929598565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215611d5b57611d5a6114f7565b5b6000611d69848285016116ae565b91505092915050565b611d7b81611685565b82525050565b6000602082019050611d966000830184611d72565b92915050565b6000611daf611daa846118cc565b6118b1565b905082815260208101848484011115611dcb57611dca61184c565b5b611dd68482856115cf565b509392505050565b600082601f830112611df357611df2611501565b5b8151611e03848260208601611d9c565b91505092915050565b600060208284031215611e2257611e216114f7565b5b600082015167ffffffffffffffff811115611e4057611e3f6114fc565b5b611e4c84828501611dde565b91505092915050565b600081905092915050565b7f7b2261646472223a220000000000000000000000000000000000000000000000600082015250565b6000611e96600983611e55565b9150611ea182611e60565b600982019050919050565b6000611eb7826115b3565b611ec18185611e55565b9350611ed18185602086016115cf565b80840191505092915050565b7f222c226d65746164617461223a227b7d227d0000000000000000000000000000600082015250565b6000611f13601283611e55565b9150611f1e82611edd565b601282019050919050565b6000611f3482611e89565b9150611f408284611eac565b9150611f4b82611f06565b915081905092915050565b60006040820190508181036000830152611f70818561160a565b90508181036020830152611f84818461160a565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fc782611719565b9150611fd283611719565b9250828203905081811115611fea57611fe9611f8d565b5b92915050565b7f2c00000000000000000000000000000000000000000000000000000000000000600082015250565b60006120266001836115be565b915061203182611ff0565b602082019050919050565b60006040820190508181036000830152612056818461160a565b9050818103602083015261206981612019565b905092915050565b600061207c82611719565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036120ae576120ad611f8d565b5b600182019050919050565b7f5d00000000000000000000000000000000000000000000000000000000000000600082015250565b60006120ef6001836115be565b91506120fa826120b9565b602082019050919050565b6000604082019050818103600083015261211f818461160a565b90508181036020830152612132816120e2565b905092915050565b61214381611719565b82525050565b600060208201905061215e600083018461213a565b92915050565b7f7b226e616d65223a2250726f6f662d6f662d417574686f72697479222c22667260008201527f6f6d223a22000000000000000000000000000000000000000000000000000000602082015250565b60006121c0602583611e55565b91506121cb82612164565b602582019050919050565b7f222c2261677265656d656e7446696c65434944223a2200000000000000000000600082015250565b600061220c601683611e55565b9150612217826121d6565b601682019050919050565b600061222e8385611e55565b935061223b8385846118fd565b82840190509392505050565b7f222c227369676e657273223a0000000000000000000000000000000000000000600082015250565b600061227d600c83611e55565b915061228882612247565b600c82019050919050565b7f2c22617070223a2264616f7369676e222c2274696d657374616d70223a000000600082015250565b60006122c9601d83611e55565b91506122d482612293565b601d82019050919050565b7f2c226d65746164617461223a227b7d227d000000000000000000000000000000600082015250565b6000612315601183611e55565b9150612320826122df565b601182019050919050565b6000612336826121b3565b91506123428288611eac565b915061234d826121ff565b915061235a828688612222565b915061236582612270565b91506123718285611eac565b915061237c826122bc565b91506123888284611eac565b915061239382612308565b91508190509695505050505050565b600082825260208201905092915050565b7f4e6f2063726561746f7200000000000000000000000000000000000000000000600082015250565b60006123e9600a836123a2565b91506123f4826123b3565b602082019050919050565b60006020820190508181036000830152612418816123dc565b9050919050565b7f4e6f207369676e61747572650000000000000000000000000000000000000000600082015250565b6000612455600c836123a2565b91506124608261241f565b602082019050919050565b6000602082019050818103600083015261248481612448565b9050919050565b60008151905061249a81611723565b92915050565b6000602082840312156124b6576124b56114f7565b5b60006124c48482850161248b565b91505092915050565b7f4e6f206461746100000000000000000000000000000000000000000000000000600082015250565b60006125036007836123a2565b915061250e826124cd565b602082019050919050565b60006020820190508181036000830152612532816124f6565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061256082612539565b61256a8185612544565b935061257a8185602086016115cf565b612583816115f9565b840191505092915050565b600060208201905081810360008301526125a88184612555565b905092915050565b7f7b2261646472657373223a220000000000000000000000000000000000000000600082015250565b60006125e6600c83611e55565b91506125f1826125b0565b600c82019050919050565b7f222c22736967223a220000000000000000000000000000000000000000000000600082015250565b6000612632600983611e55565b915061263d826125fc565b600982019050919050565b7f222c2264617461223a0000000000000000000000000000000000000000000000600082015250565b600061267e600983611e55565b915061268982612648565b600982019050919050565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b60006126ca600183611e55565b91506126d582612694565b600182019050919050565b60006126eb826125d9565b91506126f78286611eac565b915061270282612625565b915061270e8285611eac565b915061271982612671565b91506127258284611eac565b9150612730826126bd565b9150819050949350505050565b7f4e6f2050726f6f662d6f662d417574686f726974792043494400000000000000600082015250565b60006127736019836123a2565b915061277e8261273d565b602082019050919050565b600060208201905081810360008301526127a281612766565b9050919050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126127d5576127d46127a9565b5b80840192508235915067ffffffffffffffff8211156127f7576127f66127ae565b5b602083019250600182023603831315612813576128126127b3565b5b509250929050565b7f4e6f2050726f6f662d6f662d5369676e61747572652043494400000000000000600082015250565b60006128516019836123a2565b915061285c8261281b565b602082019050919050565b6000602082019050818103600083015261288081612844565b9050919050565b7f227d2c7b2270726f6f66434944223a2200000000000000000000000000000000600082015250565b60006128bd601083611e55565b91506128c882612887565b601082019050919050565b60006128df8286611eac565b91506128ec828486612222565b91506128f7826128b0565b9150819050949350505050565b7f227d5d0000000000000000000000000000000000000000000000000000000000600082015250565b600061293a600383611e55565b915061294582612904565b600382019050919050565b600061295c8286611eac565b9150612969828486612222565b91506129748261292d565b9150819050949350505050565b7f7b2261677265656d656e7446696c6550726f6f66434944223a22000000000000600082015250565b60006129b7601a83611e55565b91506129c282612981565b601a82019050919050565b7f222c2261677265656d656e745369676e50726f6f6673223a5b00000000000000600082015250565b6000612a03601983611e55565b9150612a0e826129cd565b601982019050919050565b7f2c2274696d657374616d70223a00000000000000000000000000000000000000600082015250565b6000612a4f600d83611e55565b9150612a5a82612a19565b600d82019050919050565b6000612a70826129aa565b9150612a7d828688612222565b9150612a88826129f6565b9150612a948285611eac565b9150612a9f82612a42565b9150612aab8284611eac565b9150612ab6826126bd565b915081905095945050505050565b7f4e6f207369676e65720000000000000000000000000000000000000000000000600082015250565b6000612afa6009836123a2565b9150612b0582612ac4565b602082019050919050565b60006020820190508181036000830152612b2981612aed565b9050919050565b7f4e6f2076657273696f6e00000000000000000000000000000000000000000000600082015250565b6000612b66600a836123a2565b9150612b7182612b30565b602082019050919050565b60006020820190508181036000830152612b9581612b59565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110612bdc57612bdb612b9c565b5b50565b6000819050612bed82612bcb565b919050565b6000612bfd82612bdf565b9050919050565b612c0d81612bf2565b82525050565b6000612c1f83856123a2565b9350612c2c8385846118fd565b612c35836115f9565b840190509392505050565b6000604082019050612c556000830186612c04565b8181036020830152612c68818486612c13565b9050949350505050565b600067ffffffffffffffff821115612c8d57612c8c611851565b5b612c96826115f9565b9050602081019050919050565b6000612cb6612cb184612c72565b6118b1565b905082815260208101848484011115612cd257612cd161184c565b5b612cdd8482856115cf565b509392505050565b600082601f830112612cfa57612cf9611501565b5b8151612d0a848260208601612ca3565b91505092915050565b600060208284031215612d2957612d286114f7565b5b600082015167ffffffffffffffff811115612d4757612d466114fc565b5b612d5384828501612ce5565b91505092915050565b600081905092915050565b6000612d7282612539565b612d7c8185612d5c565b9350612d8c8185602086016115cf565b80840191505092915050565b7f2c226d657373616765223a000000000000000000000000000000000000000000600082015250565b6000612dce600b83611e55565b9150612dd982612d98565b600b82019050919050565b6000612df08285612d67565b9150612dfb82612dc1565b9150612e078284611eac565b9150612e12826126bd565b91508190509392505050565b7f7b227369676e6572223a22000000000000000000000000000000000000000000600082015250565b6000612e54600b83611e55565b9150612e5f82612e1e565b600b82019050919050565b7f222c2261677265656d656e7446696c6550726f6f66434944223a220000000000600082015250565b6000612ea0601b83611e55565b9150612eab82612e6a565b601b82019050919050565b7f222c22617070223a2264616f7369676e222c2274696d657374616d70223a0000600082015250565b6000612eec601e83611e55565b9150612ef782612eb6565b601e82019050919050565b7f2c226d65746164617461223a7b7d7d0000000000000000000000000000000000600082015250565b6000612f38600f83611e55565b9150612f4382612f02565b600f82019050919050565b6000612f5982612e47565b9150612f658287611eac565b9150612f7082612e93565b9150612f7d828587612222565b9150612f8882612edf565b9150612f948284611eac565b9150612f9f82612f2b565b915081905095945050505050565b7f4e6f207369676e65727300000000000000000000000000000000000000000000600082015250565b6000612fe3600a836123a2565b9150612fee82612fad565b602082019050919050565b6000602082019050818103600083015261301281612fd6565b9050919050565b7f4e6f2041677265656d656e742046696c65204349440000000000000000000000600082015250565b600061304f6015836123a2565b915061305a82613019565b602082019050919050565b6000602082019050818103600083015261307e81613042565b905091905056fea2646970667358221220d89405edd045d7df8b3ccd643fe33d51c56d3bb9dfe4cc163651e69e8ac09ce764736f6c63430008120033",
  "libraries": {
    "StringsExpanded": "0x377662a8588c20Bf94B3b5685d096FE1CdF70Ef6"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "generateSignersJSON(address[])": {
        "params": {
          "_signers": "Array of signers of the agreement"
        },
        "returns": {
          "_0": "res JSON stringified list of signers"
        }
      },
      "getProofOfAgreementData(string,string[],uint256)": {
        "params": {
          "_proofOfAuthorityCID": "IPFS CID of the Proof-of-Authority",
          "_proofsOfSignatureCID": "Array of IPFS CID of every Proof-of-Signature from the agreement",
          "_timestamp": "Timestamp of the proof"
        },
        "returns": {
          "_0": "data Proof-of-Agreement data"
        }
      },
      "getProofOfAuthorityData(address,address,address[],string,string,uint256)": {
        "params": {
          "_agreementFileCID": "IPFS CID of the agreement file",
          "_creator": "Creator of the agreement",
          "_proofsMetadata": "EIP712 part of the proof data defined in ProofsMetadata smart contract",
          "_signers": "Signers of the agreement",
          "_timestamp": "Timestamp of the proof",
          "_version": "EIP712 version of the data"
        },
        "returns": {
          "_0": "data Proof-of-Authority data"
        }
      },
      "getProofOfAuthorityDataMessage(address,address[],string,uint256)": {
        "params": {
          "_agreementFileCID": "IPFS CID of the agreement file",
          "_creator": "Agreement creator address",
          "_signers": "Array of signers of the agreement"
        },
        "returns": {
          "_message": "Proof-of-Authority message to sign"
        }
      },
      "getProofOfAuthorityOrSignature(address,bytes,string)": {
        "params": {
          "_creator": "Creator of the proof",
          "_data": "Data that the user have signed",
          "_signature": "Signature of the proof data"
        },
        "returns": {
          "_proof": "The proof object as a string"
        }
      },
      "getProofOfSignatureData(address,address,string,string,uint256)": {
        "params": {
          "_proofOfAuthorityCID": "IPFS CID of the Proof-of-Authority",
          "_proofsMetadata": "EIP712 part of the proof data defined in ProofsMetadata smart contract",
          "_signer": "Current signer of the agreement from the list of agreement signers",
          "_timestamp": "Timestamp of the proof",
          "_version": "EIP712 version of the data"
        },
        "returns": {
          "_0": "data Proof-of-Signature data"
        }
      },
      "getProofOfSignatureDataMessage(address,string,uint256)": {
        "params": {
          "_proofOfAuthorityCID": "IPFS CID of the Proof-of-Authority",
          "_signer": "Current signer of the agreement from the list of agreement signers",
          "_timestamp": "Timestamp of the proof"
        },
        "returns": {
          "_message": "Proof-of-Authority message to sign"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "generateSignersJSON(address[])": {
        "notice": "Generates a JSON stringified content with signers of the agreement"
      },
      "getProofOfAgreementData(string,string[],uint256)": {
        "notice": "Returns Proof-of-Agreement data that is equal to Proof-of-Agreement as it requires no signature"
      },
      "getProofOfAuthorityData(address,address,address[],string,string,uint256)": {
        "notice": "Returns Proof-of-Authority data for the creator to sign"
      },
      "getProofOfAuthorityDataMessage(address,address[],string,uint256)": {
        "notice": "Returns the core message (without EIP712 metadata) of Proof-of-Authority for the creator to sign"
      },
      "getProofOfAuthorityOrSignature(address,bytes,string)": {
        "notice": "Returns full Proof-of-Authority or Proof-of-Signature (data with signature)"
      },
      "getProofOfSignatureData(address,address,string,string,uint256)": {
        "notice": "Returns Proof-of-Signature data for the signer to sign"
      },
      "getProofOfSignatureDataMessage(address,string,uint256)": {
        "notice": "Returns the core message (without EIP712 metadata) of Proof-of-Signature for the signer to sign"
      }
    },
    "notice": "ProofsHelper library helps Proofs smart contract to generate Proof-of-Authority, Proof-of-Signature, and Proof-of-Agreement in a text format",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}