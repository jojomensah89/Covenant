{
  "address": "0x453894A722ac8408471A349161A7d4f59374124A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proofsMetadata",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "agreementFileCID",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                }
              ],
              "internalType": "struct IProofs.Signer[]",
              "name": "signers",
              "type": "tuple[]"
            },
            {
              "internalType": "string",
              "name": "app",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "indexed": true,
          "internalType": "struct IProofs.ProofOfAuthorityMsg",
          "name": "message",
          "type": "tuple"
        }
      ],
      "name": "NewProofOfAuthority",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "agreementFileCID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "proofOfAuthorityCID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "proofCID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "proofJSON",
          "type": "string"
        }
      ],
      "name": "ProofOfAgreementEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "agreementFileCID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "proofCID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "proofJSON",
          "type": "string"
        }
      ],
      "name": "ProofOfSignatureEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "domain",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "finalProofs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "agreementFileCID",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                }
              ],
              "internalType": "struct IProofs.Signer[]",
              "name": "signers",
              "type": "tuple[]"
            },
            {
              "internalType": "string",
              "name": "app",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct IProofs.ProofOfAuthorityMsg",
          "name": "message",
          "type": "tuple"
        }
      ],
      "name": "get",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "sig",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "agreementFileCID",
                  "type": "string"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "addr",
                      "type": "address"
                    },
                    {
                      "internalType": "string",
                      "name": "metadata",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct IProofs.Signer[]",
                  "name": "signers",
                  "type": "tuple[]"
                },
                {
                  "internalType": "string",
                  "name": "app",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "timestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                }
              ],
              "internalType": "struct IProofs.ProofOfAuthorityMsg",
              "name": "message",
              "type": "tuple"
            }
          ],
          "internalType": "struct IProofs.ProofOfAuthorityShrinked",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct IProofs.Signer[]",
          "name": "_input",
          "type": "tuple[]"
        }
      ],
      "name": "hash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "agreementFileCID",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                }
              ],
              "internalType": "struct IProofs.Signer[]",
              "name": "signers",
              "type": "tuple[]"
            },
            {
              "internalType": "string",
              "name": "app",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct IProofs.ProofOfAuthorityMsg",
          "name": "_input",
          "type": "tuple"
        }
      ],
      "name": "hash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "myProofKeys",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "poaData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "poagData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "posData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proofsMetadata",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "agreementFileCID",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                }
              ],
              "internalType": "struct IProofs.Signer[]",
              "name": "signers",
              "type": "tuple[]"
            },
            {
              "internalType": "string",
              "name": "app",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct IProofs.ProofOfAuthorityMsg",
          "name": "message",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "recover",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "agreementFileCID",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                }
              ],
              "internalType": "struct IProofs.Signer[]",
              "name": "signers",
              "type": "tuple[]"
            },
            {
              "internalType": "string",
              "name": "app",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct IProofs.ProofOfAuthorityMsg",
          "name": "message",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        }
      ],
      "name": "store",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdcceb812868d4705051dafd1a22e8b6c69ebe968ee66facf55172a64c11b8139",
  "receipt": {
    "to": null,
    "from": "0xde358FCcA54Fa226aE16Ac3927487260dAfc3835",
    "contractAddress": "0x453894A722ac8408471A349161A7d4f59374124A",
    "transactionIndex": 0,
    "gasUsed": "3243795",
    "logsBloom": "0x
    "blockHash": "0x2b53d9c55fcc02ccfb80a7016b4a236a09596e994a2e03f83af5f06e0da6b9c5",
    "transactionHash": "0xdcceb812868d4705051dafd1a22e8b6c69ebe968ee66facf55172a64c11b8139",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3006155,
        "transactionHash": "0xdcceb812868d4705051dafd1a22e8b6c69ebe968ee66facf55172a64c11b8139",
        "address": "0x453894A722ac8408471A349161A7d4f59374124A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000de358fcca54fa226ae16ac3927487260dafc3835"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2b53d9c55fcc02ccfb80a7016b4a236a09596e994a2e03f83af5f06e0da6b9c5"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3006155,
        "transactionHash": "0xdcceb812868d4705051dafd1a22e8b6c69ebe968ee66facf55172a64c11b8139",
        "address": "0x453894A722ac8408471A349161A7d4f59374124A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000de358fcca54fa226ae16ac3927487260dafc3835",
          "0x000000000000000000000000de358fcca54fa226ae16ac3927487260dafc3835"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x2b53d9c55fcc02ccfb80a7016b4a236a09596e994a2e03f83af5f06e0da6b9c5"
      }
    ],
    "blockNumber": 3006155,
    "cumulativeGasUsed": "3243795",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf282509F9C5ACe2666163795119C52e738D0e198",
    "0xde358FCcA54Fa226aE16Ac3927487260dAfc3835"
  ],
  "numDeployments": 1,
  "solcInputHash": "e03c71885da52b71bfb59f715f690cfe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proofsMetadata\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"agreementFileCID\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IProofs.Signer[]\",\"name\":\"signers\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"app\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"indexed\":true,\"internalType\":\"struct IProofs.ProofOfAuthorityMsg\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"NewProofOfAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"agreementFileCID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proofOfAuthorityCID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proofCID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proofJSON\",\"type\":\"string\"}],\"name\":\"ProofOfAgreementEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"agreementFileCID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proofCID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proofJSON\",\"type\":\"string\"}],\"name\":\"ProofOfSignatureEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"finalProofs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"agreementFileCID\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IProofs.Signer[]\",\"name\":\"signers\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"app\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IProofs.ProofOfAuthorityMsg\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"agreementFileCID\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IProofs.Signer[]\",\"name\":\"signers\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"app\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IProofs.ProofOfAuthorityMsg\",\"name\":\"message\",\"type\":\"tuple\"}],\"internalType\":\"struct IProofs.ProofOfAuthorityShrinked\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IProofs.Signer[]\",\"name\":\"_input\",\"type\":\"tuple[]\"}],\"name\":\"hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"agreementFileCID\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IProofs.Signer[]\",\"name\":\"signers\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"app\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IProofs.ProofOfAuthorityMsg\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"myProofKeys\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"poaData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"poagData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"posData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofsMetadata\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"agreementFileCID\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IProofs.Signer[]\",\"name\":\"signers\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"app\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IProofs.ProofOfAuthorityMsg\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"agreementFileCID\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IProofs.Signer[]\",\"name\":\"signers\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"app\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IProofs.ProofOfAuthorityMsg\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"name\":\"store\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"domain()\":{\"notice\":\"TODO: move to ProofsMetadata\"}},\"notice\":\"Stores DAOsign proofs. Note Proof-of-Authority = PoA Proof-of-Signature = PoS Proof-of-Agreement = PoAg\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Proofs.sol\":\"Proofs\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5a08ad61f4e82b8a3323562661a86fb10b10190848073fdc13d4ac43710ffba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Proofs.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport { IERC165 } from '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\r\\nimport { ERC165Checker } from '@openzeppelin/contracts/utils/introspection/ERC165Checker.sol';\\r\\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport  {IProofsMetadata}  from './interfaces/IProofMetadata.sol';\\r\\nimport { IProofs } from './interfaces/IProofs.sol';\\r\\nimport { StringsExpanded } from './libs/StringsExpanded.sol';\\r\\nimport { ProofsVerification } from './libs/ProofVerification.sol';\\r\\nimport { ProofsHelper } from './libs/ProofsHelper.sol';\\r\\nimport { ProofTypes } from './libs/common/ProofTypes.sol';\\r\\nimport { ECDSA } from '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\r\\n\\r\\n/**\\r\\n * Stores DAOsign proofs.\\r\\n *\\r\\n * Note\\r\\n * Proof-of-Authority = PoA\\r\\n * Proof-of-Signature = PoS\\r\\n * Proof-of-Agreement = PoAg\\r\\n */\\r\\ncontract Proofs is Ownable, IProofs {\\r\\n    using StringsExpanded for string;\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    address public proofsMetadata;\\r\\n\\r\\n    // Agreement File CID -> proof CID -> proof data\\r\\n    mapping(string => mapping(string => string)) public finalProofs;\\r\\n\\r\\n    // hashed proof params -> proof data\\r\\n    mapping(bytes32 => string) public poaData;\\r\\n    mapping(bytes32 => string) public posData;\\r\\n    mapping(bytes32 => string) public poagData;\\r\\n\\r\\n    mapping(bytes32 => bytes) private proofs;\\r\\n    mapping(address => bytes32[]) public myProofKeys;\\r\\n\\r\\n    constructor(address _proofsMetadata, address _admin) {\\r\\n        require(\\r\\n            ERC165Checker.supportsERC165(_proofsMetadata) &&\\r\\n                IERC165(_proofsMetadata).supportsInterface(type(IProofsMetadata).interfaceId),\\r\\n            'Must support IProofsMetadata'\\r\\n        );\\r\\n        proofsMetadata = _proofsMetadata;\\r\\n        _transferOwnership(_admin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * TODO: move to ProofsMetadata\\r\\n     */\\r\\n    EIP712Domain public domain = EIP712Domain({ name: 'daosign', version: '0.1.0' });\\r\\n\\r\\n    bytes32 constant EIP712DOMAIN_TYPEHASH = keccak256('EIP712Domain(string name,string version)');\\r\\n    bytes32 constant PROOF_AUTHORITY_TYPEHASH =\\r\\n        keccak256(\\r\\n            'ProofOfAuthorityMsg(string name,address from,string agreementFileCID,Signer[] signers,string app,uint64 timestamp,string metadata)Signer(address addr,string metadata)'\\r\\n        );\\r\\n    bytes32 constant SIGNER_TYPEHASH = keccak256('Signer(address addr,string metadata)');\\r\\n\\r\\n    function hash(EIP712Domain memory _input) internal pure returns (bytes32) {\\r\\n        bytes memory encoded = abi.encode(\\r\\n            EIP712DOMAIN_TYPEHASH,\\r\\n            keccak256(bytes(_input.name)),\\r\\n            keccak256(bytes(_input.version))\\r\\n        );\\r\\n        return keccak256(encoded);\\r\\n    }\\r\\n\\r\\n    function hash(Signer memory _input) internal pure returns (bytes32) {\\r\\n        bytes memory encoded = abi.encode(\\r\\n            SIGNER_TYPEHASH,\\r\\n            _input.addr,\\r\\n            keccak256(bytes(_input.metadata))\\r\\n        );\\r\\n        return keccak256(encoded);\\r\\n    }\\r\\n\\r\\n    function hash(Signer[] memory _input) public pure returns (bytes32) {\\r\\n        bytes memory encoded;\\r\\n        for (uint i = 0; i < _input.length; i++) {\\r\\n            encoded = abi.encodePacked(encoded, hash(_input[i]));\\r\\n        }\\r\\n        return keccak256(encoded);\\r\\n    }\\r\\n\\r\\n    function hash(ProofOfAuthorityMsg memory _input) public pure returns (bytes32) {\\r\\n        bytes memory encoded = abi.encode(\\r\\n            PROOF_AUTHORITY_TYPEHASH,\\r\\n            keccak256(bytes(_input.name)),\\r\\n            _input.from,\\r\\n            keccak256(bytes(_input.agreementFileCID)),\\r\\n            hash(_input.signers),\\r\\n            keccak256(bytes(_input.app)),\\r\\n            _input.timestamp,\\r\\n            keccak256(bytes(_input.metadata))\\r\\n        );\\r\\n        return keccak256(encoded);\\r\\n    }\\r\\n\\r\\n    function recover(\\r\\n        ProofOfAuthorityMsg memory message,\\r\\n        bytes memory signature\\r\\n    ) public pure returns (address) {\\r\\n        bytes32 DOMAIN_HASH = hash(EIP712Domain({ name: 'daosign', version: '0.1.0' }));\\r\\n\\r\\n        bytes32 packetHash = hash(message);\\r\\n        bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_HASH, packetHash));\\r\\n        return digest.recover(signature);\\r\\n    }\\r\\n\\r\\n    function validate(ProofOfAuthorityMsg memory message) internal view returns (bool) {\\r\\n        require(message.name.equal('Proof-of-Authority'), 'Invalid name');\\r\\n        // require(message.from == signer, 'Invalid from address');\\r\\n        require(message.agreementFileCID.length() == 46, 'Invalid CID length');\\r\\n        require(message.app.equal('daosign'), 'Invalid app');\\r\\n        require(\\r\\n            message.timestamp <= block.timestamp && message.timestamp >= block.timestamp - 3 hours,\\r\\n            'Invalid timestamp'\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < message.signers.length; i++) {\\r\\n            require(message.signers[i].addr != address(0), 'Invalid signer');\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function save(\\r\\n        ProofOfAuthorityMsg memory message,\\r\\n        bytes memory signature,\\r\\n        string memory version\\r\\n    ) internal {\\r\\n        bytes32 key = keccak256(abi.encode(message));\\r\\n        proofs[key] = abi.encode(ProofOfAuthorityShrinked(signature, version, message));\\r\\n        myProofKeys[message.from].push(key);\\r\\n        emit NewProofOfAuthority((message));\\r\\n    }\\r\\n\\r\\n    function get(\\r\\n        ProofOfAuthorityMsg memory message\\r\\n    ) public view returns (ProofOfAuthorityShrinked memory) {\\r\\n        return abi.decode(proofs[keccak256(abi.encode(message))], (ProofOfAuthorityShrinked));\\r\\n    }\\r\\n\\r\\n    function store(\\r\\n        ProofOfAuthorityMsg memory message,\\r\\n        bytes memory signature,\\r\\n        string memory version\\r\\n    ) public {\\r\\n        require(recover(message, signature) == message.from, 'Invalid signature');\\r\\n        require(validate(message));\\r\\n        save(message, signature, version);\\r\\n    }\\r\\n\\r\\n    // /**\\r\\n    //  * Stores Proof-of-Signature after verifying the correctness of the signature\\r\\n    //  * @param _signer Current signer of the agreement from the list of agreement signers\\r\\n    //  * @param _signature Signature of Proof-of-Signature data\\r\\n    //  * @param _fileCID IPFS CID of the agreement file\\r\\n    //  * @param _posCID IPFS CID of Proof-of-Signature\\r\\n    //  */\\r\\n    // function storeProofOfSignature(\\r\\n    //     address _signer,\\r\\n    //     bytes calldata _signature,\\r\\n    //     string calldata _fileCID,\\r\\n    //     string calldata _posCID,\\r\\n    //     string calldata _poaCID,\\r\\n    //     string calldata _version\\r\\n    // ) external onlyOwner {\\r\\n    //     require(_posCID.length() > 0, 'No ProofCID');\\r\\n    //     require(finalProofs[_fileCID][_posCID].length() == 0, 'Proof already stored');\\r\\n    //     string memory _posData = getPoSData(_signer, _fileCID, _poaCID, _version);\\r\\n    //     require(\\r\\n    //         ProofsVerification.verifySignedProof(_signer, _posData, _signature),\\r\\n    //         'Invalid signature'\\r\\n    //     );\\r\\n\\r\\n    //     string memory proof = ProofsHelper.getProofOfAuthorityOrSignature(\\r\\n    //         _signer,\\r\\n    //         _signature,\\r\\n    //         _posData\\r\\n    //     );\\r\\n    //     finalProofs[_fileCID][_posCID] = proof;\\r\\n\\r\\n    //     emit ProofOfSignatureEvent(_signer, _signature, _fileCID, _posCID, proof);\\r\\n    // }\\r\\n\\r\\n    // /**\\r\\n    //  * Stores Proof-of-Agreement\\r\\n    //  * @param _fileCID IPFS CID of the agreement file\\r\\n    //  * @param _poaCID IPFS CID of Proof-of-Authority\\r\\n    //  * @param _posCIDs IPFS CIDs of Proof-of-Signature\\r\\n    //  * @param _poagCID IPFS CID of Proof-of-Agreement\\r\\n    //  */\\r\\n    // function storeProofOfAgreement(\\r\\n    //     string calldata _fileCID,\\r\\n    //     string calldata _poaCID,\\r\\n    //     string[] calldata _posCIDs,\\r\\n    //     string calldata _poagCID\\r\\n    // ) external onlyOwner {\\r\\n    //     require(_poagCID.length() > 0, 'No ProofCID');\\r\\n    //     require(_fileCID.length() > 0, 'No Agreement File CID');\\r\\n    //     require(finalProofs[_fileCID][_poagCID].length() == 0, 'Proof already stored');\\r\\n    //     require(finalProofs[_fileCID][_poaCID].length() > 0, 'Invalid input data');\\r\\n\\r\\n    //     finalProofs[_fileCID][_poagCID] = getPoAgData(_fileCID, _poaCID, _posCIDs);\\r\\n\\r\\n    //     emit ProofOfAgreementEvent(_fileCID, _poaCID, _poagCID, finalProofs[_fileCID][_poagCID]);\\r\\n    // }\\r\\n}\",\"keccak256\":\"0x3e617ebc7ada255c8b1413762dc052828d1ba519e19faf4b930a46ea2a65f7b3\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IProofMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport { ProofTypes } from '../libs/common/ProofTypes.sol';\\r\\n\\r\\ninterface IProofsMetadata {\\r\\n    event MetadataAdded(ProofTypes.Proofs proof, string indexed version, bytes metadata);\\r\\n    event MetadataUpdated(ProofTypes.Proofs proof, string indexed version, bytes metadata);\\r\\n\\r\\n    function proofsMetadata(\\r\\n        ProofTypes.Proofs _type,\\r\\n        string calldata _version\\r\\n    ) external view returns (bytes memory);\\r\\n\\r\\n    function metadataVersions(\\r\\n        ProofTypes.Proofs _type,\\r\\n        uint256 index\\r\\n    ) external view returns (string memory);\\r\\n\\r\\n    function getMetadataNumOfVersions(ProofTypes.Proofs _type) external view returns (uint256);\\r\\n\\r\\n    function addMetadata(\\r\\n        ProofTypes.Proofs _type,\\r\\n        string calldata _version,\\r\\n        bytes calldata _metadata\\r\\n    ) external;\\r\\n\\r\\n    function forceUpdateMetadata(\\r\\n        ProofTypes.Proofs _type,\\r\\n        string calldata _version,\\r\\n        bytes calldata _metadata\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0xa4b02172e8de9ec660c3b27761c94dff8730702c7b3648d00d5695d6cd69074a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IProofs.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport { ProofTypes } from '../libs/common/ProofTypes.sol';\\r\\n\\r\\ninterface IProofs {\\r\\n    event NewProofOfAuthority(ProofOfAuthorityMsg indexed message);\\r\\n    event ProofOfSignatureEvent(\\r\\n        address indexed signer,\\r\\n        bytes signature,\\r\\n        string indexed agreementFileCID,\\r\\n        string proofCID,\\r\\n        string proofJSON\\r\\n    );\\r\\n    event ProofOfAgreementEvent(\\r\\n        string indexed agreementFileCID,\\r\\n        string proofOfAuthorityCID,\\r\\n        string proofCID,\\r\\n        string proofJSON\\r\\n    );\\r\\n\\r\\n    struct EIP712Domain {\\r\\n        string name;\\r\\n        string version;\\r\\n    }\\r\\n    struct Signer {\\r\\n        address addr;\\r\\n        string metadata;\\r\\n    }\\r\\n    struct ProofOfAuthorityMsg {\\r\\n        string name;\\r\\n        address from;\\r\\n        string agreementFileCID;\\r\\n        Signer[] signers;\\r\\n        string app;\\r\\n        uint64 timestamp;\\r\\n        string metadata;\\r\\n    }\\r\\n    struct ProofOfAuthorityShrinked {\\r\\n        bytes sig;\\r\\n        string version;\\r\\n        ProofOfAuthorityMsg message;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Functions from variables\\r\\n     */\\r\\n    // function proofsMetadata() external view returns (address);\\r\\n\\r\\n    // function finalProofs(\\r\\n    //     string calldata agreementFileCID,\\r\\n    //     string calldata proofCID\\r\\n    // ) external view returns (string memory);\\r\\n\\r\\n    // function poaData(bytes32 input) external view returns (string memory);\\r\\n\\r\\n    // function posData(bytes32 input) external view returns (string memory);\\r\\n\\r\\n    // function poagData(bytes32 input) external view returns (string memory);\\r\\n\\r\\n    // function storeProofOfAuthority(\\r\\n    //     address _creator,\\r\\n    //     address[] calldata _signers,\\r\\n    //     string calldata _version,\\r\\n    //     bytes calldata _signature,\\r\\n    //     string calldata _fileCID,\\r\\n    //     string calldata _proofCID\\r\\n    // ) external;\\r\\n\\r\\n    // function storeProofOfSignature(\\r\\n    //     address _signer,\\r\\n    //     bytes calldata _signature,\\r\\n    //     string calldata _fileCID,\\r\\n    //     string calldata _posCID,\\r\\n    //     string calldata _poaCID,\\r\\n    //     string calldata _version\\r\\n    // ) external;\\r\\n\\r\\n    // function storeProofOfAgreement(\\r\\n    //     string calldata _fileCID,\\r\\n    //     string calldata _poaCID,\\r\\n    //     string[] calldata _posCIDs,\\r\\n    //     string calldata _poagCID\\r\\n    // ) external;\\r\\n}\",\"keccak256\":\"0xb70ee9ea030d7a3ed9860e290f83b3d97c35872a454bb93be16757411f7d4522\",\"license\":\"UNLICENSED\"},\"contracts/libs/ProofVerification.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport { ECDSA } from '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\r\\n\\r\\n/**\\r\\n * Verifies Proof-of-Authority and Proof-of-Signature validity. May be used to verify any Ethereum\\r\\n * signature.\\r\\n */\\r\\nlibrary ProofsVerification {\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    /**\\r\\n     * Verify Proof-of-Authority or Proof-of-Signature signature\\r\\n     * @param _signer Signer of the data\\r\\n     * @param _data Raw Proof-of-Authority stringified JSON object that the signer signs.\\r\\n     *              Note: it may be the output of Proofs.getProofOfSignatureData function\\r\\n     * @param _signature Signature of the {_data}\\r\\n     * @return isValid Is signature valid or not\\r\\n     */\\r\\n    function verifySignedProof(\\r\\n        address _signer,\\r\\n        string memory _data,\\r\\n        bytes calldata _signature\\r\\n    ) public pure returns (bool) {\\r\\n        bytes32 dataHash = keccak256(abi.encodePacked(_data));\\r\\n        return verify(_signer, dataHash, _signature);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Verify any Ethereum signature of any data\\r\\n     * @param _signer Signer of the data\\r\\n     * @param _dataHash Hash of the data that was signed\\r\\n     * @param _signature Signature of the data\\r\\n     * @return isValid Is signature valid or not\\r\\n     */\\r\\n    function verify(\\r\\n        address _signer,\\r\\n        bytes32 _dataHash,\\r\\n        bytes calldata _signature\\r\\n    ) public pure returns (bool) {\\r\\n        return _dataHash.toEthSignedMessageHash().recover(_signature) == _signer;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xc4e9ff506def4284f9451cbeb64c58028f55badab9883f5e5cd9f667099d61d3\",\"license\":\"UNLICENSED\"},\"contracts/libs/ProofsHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport { ProofTypes } from './common/ProofTypes.sol';\\r\\nimport { StringsExpanded } from './StringsExpanded.sol';\\r\\nimport { IProofsMetadata } from '../interfaces/IProofMetadata.sol';\\r\\n\\r\\n/**\\r\\n * ProofsHelper library helps Proofs smart contract to generate Proof-of-Authority, Proof-of-Signature, and\\r\\n * Proof-of-Agreement in a text format\\r\\n */\\r\\nlibrary ProofsHelper {\\r\\n    using StringsExpanded for string;\\r\\n    using StringsExpanded for bytes;\\r\\n    using StringsExpanded for address;\\r\\n    using StringsExpanded for uint256;\\r\\n\\r\\n    /**\\r\\n     * Returns full Proof-of-Authority or Proof-of-Signature (data with signature)\\r\\n     * @param _creator Creator of the proof\\r\\n     * @param _signature Signature of the proof data\\r\\n     * @param _data Data that the user have signed\\r\\n     * @return _proof The proof object as a string\\r\\n     */\\r\\n    function getProofOfAuthorityOrSignature(\\r\\n        address _creator,\\r\\n        bytes calldata _signature,\\r\\n        string memory _data\\r\\n    ) external pure returns (string memory _proof) {\\r\\n        require(_creator != address(0), 'No creator');\\r\\n        require(_signature.length > 0, 'No signature');\\r\\n        require(_data.length() > 0, 'No data');\\r\\n        _proof = string(\\r\\n            abi.encodePacked(\\r\\n                '{\\\"address\\\":\\\"',\\r\\n                _creator.toString(),\\r\\n                '\\\",\\\"sig\\\":\\\"',\\r\\n                _signature.toHexString(),\\r\\n                '\\\",\\\"data\\\":',\\r\\n                _data,\\r\\n                '}'\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns Proof-of-Authority data for the creator to sign\\r\\n     * @param _proofsMetadata EIP712 part of the proof data defined in ProofsMetadata smart contract\\r\\n     * @param _creator Creator of the agreement\\r\\n     * @param _signers Signers of the agreement\\r\\n     * @param _agreementFileCID IPFS CID of the agreement file\\r\\n     * @param _version EIP712 version of the data\\r\\n     * @param _timestamp Timestamp of the proof\\r\\n     * @return data Proof-of-Authority data\\r\\n     */\\r\\n    function getProofOfAuthorityData(\\r\\n        address _proofsMetadata,\\r\\n        address _creator,\\r\\n        address[] calldata _signers,\\r\\n        string calldata _agreementFileCID,\\r\\n        string calldata _version,\\r\\n        uint256 _timestamp\\r\\n    ) external view returns (string memory) {\\r\\n        require(_creator != address(0), 'No creator');\\r\\n        require(_signers.length > 0, 'No signers');\\r\\n        require(_agreementFileCID.length() > 0, 'No Agreement File CID');\\r\\n        require(_version.length() > 0, 'No version');\\r\\n\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    IProofsMetadata(_proofsMetadata).proofsMetadata(\\r\\n                        ProofTypes.Proofs.ProofOfAuthority,\\r\\n                        _version\\r\\n                    ),\\r\\n                    ',\\\"message\\\":',\\r\\n                    getProofOfAuthorityDataMessage(\\r\\n                        _creator,\\r\\n                        _signers,\\r\\n                        _agreementFileCID,\\r\\n                        _timestamp\\r\\n                    ),\\r\\n                    '}'\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns Proof-of-Signature data for the signer to sign\\r\\n     * @param _proofsMetadata EIP712 part of the proof data defined in ProofsMetadata smart contract\\r\\n     * @param _signer Current signer of the agreement from the list of agreement signers\\r\\n     * @param _proofOfAuthorityCID IPFS CID of the Proof-of-Authority\\r\\n     * @param _version EIP712 version of the data\\r\\n     * @param _timestamp Timestamp of the proof\\r\\n     * @return data Proof-of-Signature data\\r\\n     */\\r\\n    function getProofOfSignatureData(\\r\\n        address _proofsMetadata,\\r\\n        address _signer,\\r\\n        string calldata _proofOfAuthorityCID,\\r\\n        string calldata _version,\\r\\n        uint256 _timestamp\\r\\n    ) external view returns (string memory) {\\r\\n        require(_signer != address(0), 'No signer');\\r\\n        require(_proofOfAuthorityCID.length() > 0, 'No Proof-of-Authority CID');\\r\\n        require(_version.length() > 0, 'No version');\\r\\n\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    IProofsMetadata(_proofsMetadata).proofsMetadata(\\r\\n                        ProofTypes.Proofs.ProofOfSignature,\\r\\n                        _version\\r\\n                    ),\\r\\n                    ',\\\"message\\\":',\\r\\n                    getProofOfSignatureDataMessage(_signer, _proofOfAuthorityCID, _timestamp),\\r\\n                    '}'\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns Proof-of-Agreement data that is equal to Proof-of-Agreement as it requires no\\r\\n     * signature\\r\\n     * @param _proofOfAuthorityCID IPFS CID of the Proof-of-Authority\\r\\n     * @param _proofsOfSignatureCID Array of IPFS CID of every Proof-of-Signature from the agreement\\r\\n     * @param _timestamp Timestamp of the proof\\r\\n     * @return data Proof-of-Agreement data\\r\\n     */\\r\\n    function getProofOfAgreementData(\\r\\n        string calldata _proofOfAuthorityCID,\\r\\n        string[] calldata _proofsOfSignatureCID,\\r\\n        uint256 _timestamp\\r\\n    ) external pure returns (string memory) {\\r\\n        require(_proofOfAuthorityCID.length() > 0, 'No Proof-of-Authority CID');\\r\\n        for (uint256 i = 0; i < _proofsOfSignatureCID.length; i++) {\\r\\n            require(_proofsOfSignatureCID[i].length() > 0, 'No Proof-of-Signature CID');\\r\\n        }\\r\\n\\r\\n        string memory arrOfPoSigs = '{\\\"proofCID\\\":\\\"';\\r\\n        for (uint256 i = 0; i < _proofsOfSignatureCID.length; i++) {\\r\\n            if (i != _proofsOfSignatureCID.length - 1) {\\r\\n                arrOfPoSigs = string(\\r\\n                    abi.encodePacked(arrOfPoSigs, _proofsOfSignatureCID[i], '\\\"},{\\\"proofCID\\\":\\\"')\\r\\n                );\\r\\n            } else {\\r\\n                // the last proofCID\\r\\n                arrOfPoSigs = string(\\r\\n                    abi.encodePacked(arrOfPoSigs, _proofsOfSignatureCID[i], '\\\"}]')\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    '{\\\"agreementFileProofCID\\\":\\\"',\\r\\n                    _proofOfAuthorityCID,\\r\\n                    '\\\",\\\"agreementSignProofs\\\":[',\\r\\n                    arrOfPoSigs,\\r\\n                    ',\\\"timestamp\\\":',\\r\\n                    _timestamp.toString(),\\r\\n                    '}'\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the core message (without EIP712 metadata) of Proof-of-Authority for the creator to\\r\\n     * sign\\r\\n     * @param _creator Agreement creator address\\r\\n     * @param _signers Array of signers of the agreement\\r\\n     * @param _agreementFileCID IPFS CID of the agreement file\\r\\n     * @return _message Proof-of-Authority message to sign\\r\\n     */\\r\\n    function getProofOfAuthorityDataMessage(\\r\\n        address _creator,\\r\\n        address[] calldata _signers,\\r\\n        string calldata _agreementFileCID,\\r\\n        uint256 _timestamp\\r\\n    ) public pure returns (string memory _message) {\\r\\n        _message = string(\\r\\n            abi.encodePacked(\\r\\n                '{\\\"name\\\":\\\"Proof-of-Authority\\\",\\\"from\\\":\\\"',\\r\\n                _creator.toString(),\\r\\n                '\\\",\\\"agreementFileCID\\\":\\\"',\\r\\n                _agreementFileCID,\\r\\n                '\\\",\\\"signers\\\":',\\r\\n                generateSignersJSON(_signers),\\r\\n                ',\\\"app\\\":\\\"daosign\\\",\\\"timestamp\\\":',\\r\\n                _timestamp.toString(),\\r\\n                ',\\\"metadata\\\":\\\"{}\\\"}'\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the core message (without EIP712 metadata) of Proof-of-Signature for the signer to\\r\\n     * sign\\r\\n     * @param _signer Current signer of the agreement from the list of agreement signers\\r\\n     * @param _proofOfAuthorityCID IPFS CID of the Proof-of-Authority\\r\\n     * @param _timestamp Timestamp of the proof\\r\\n     * @return _message Proof-of-Authority message to sign\\r\\n     */\\r\\n    function getProofOfSignatureDataMessage(\\r\\n        address _signer,\\r\\n        string calldata _proofOfAuthorityCID,\\r\\n        uint256 _timestamp\\r\\n    ) public pure returns (string memory _message) {\\r\\n        _message = string(\\r\\n            abi.encodePacked(\\r\\n                '{\\\"signer\\\":\\\"',\\r\\n                _signer.toString(),\\r\\n                '\\\",\\\"agreementFileProofCID\\\":\\\"',\\r\\n                _proofOfAuthorityCID,\\r\\n                '\\\",\\\"app\\\":\\\"daosign\\\",\\\"timestamp\\\":',\\r\\n                _timestamp.toString(),\\r\\n                ',\\\"metadata\\\":{}}'\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Generates a JSON stringified content with signers of the agreement\\r\\n     * @param _signers Array of signers of the agreement\\r\\n     * @return res JSON stringified list of signers\\r\\n     */\\r\\n    function generateSignersJSON(address[] calldata _signers) public pure returns (string memory) {\\r\\n        string memory res = '[';\\r\\n\\r\\n        for (uint256 i = 0; i < _signers.length; i++) {\\r\\n            res = res.concat(\\r\\n                string(abi.encodePacked('{\\\"addr\\\":\\\"', _signers[i].toString(), '\\\",\\\"metadata\\\":\\\"{}\\\"}'))\\r\\n            );\\r\\n            if (i != _signers.length - 1) {\\r\\n                res = res.concat(',');\\r\\n            }\\r\\n        }\\r\\n\\r\\n        res = res.concat(']');\\r\\n\\r\\n        return res;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x649e6ec5f79cfcf52df259b6ad6a3ce274135f9d686475efc0956eff8dc45dbc\",\"license\":\"UNLICENSED\"},\"contracts/libs/StringsExpanded.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n/**\\r\\n * Enhances operation with strings that are not possible in the current Solidity version (v0.8.18)\\r\\n */\\r\\nlibrary StringsExpanded {\\r\\n    /**\\r\\n     * @dev Compares two strings\\r\\n     * @param _s1 One string\\r\\n     * @param _s2 Another string\\r\\n     * @return Are string equal\\r\\n     */\\r\\n    function equal(string memory _s1, string memory _s2) internal pure returns (bool) {\\r\\n        return keccak256(abi.encodePacked(_s1)) == keccak256(abi.encodePacked(_s2));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Gets length of the string\\r\\n     * @param _s Input string\\r\\n     * @return res The lenght of the string\\r\\n     */\\r\\n    function length(string memory _s) public pure returns (uint256) {\\r\\n        return bytes(_s).length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Combines two input strings into one\\r\\n     * @param _s1 The first string\\r\\n     * @param _s2 The second string\\r\\n     * @return res The resultant string created by merging s1 and s2\\r\\n     */\\r\\n    function concat(string memory _s1, string memory _s2) public pure returns (string memory) {\\r\\n        return string(abi.encodePacked(_s1, _s2));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Converts a `uint256` to its ASCII `string` decimal representation\\r\\n     * @notice Inspired by OraclizeAPI's implementation - MIT licence\\r\\n     * https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n     * @param _x Input number\\r\\n     * @return res Number represented as a string\\r\\n     */\\r\\n    function toString(uint256 _x) public pure returns (string memory) {\\r\\n        if (_x == 0) {\\r\\n            return '0';\\r\\n        }\\r\\n        uint256 _temp = _x;\\r\\n        uint256 _digits;\\r\\n        while (_temp != 0) {\\r\\n            _digits++;\\r\\n            _temp /= 10;\\r\\n        }\\r\\n        bytes memory _buffer = new bytes(_digits);\\r\\n        while (_x != 0) {\\r\\n            _digits -= 1;\\r\\n            _buffer[_digits] = bytes1(uint8(48 + uint256(_x % 10)));\\r\\n            _x /= 10;\\r\\n        }\\r\\n        return string(_buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Converts an Ethereum address to a string\\r\\n     * Note: only lowercase letters are used\\r\\n     * @param _addr The Ethereum address to convert\\r\\n     * @return res The string representation of the Ethereum address, including the '0x' prefix\\r\\n     */\\r\\n    function toString(address _addr) public pure returns (string memory) {\\r\\n        bytes32 _bytes = bytes32(uint256(uint160(_addr)));\\r\\n        bytes memory HEX = '0123456789abcdef';\\r\\n        bytes memory str = new bytes(42);\\r\\n        str[0] = '0';\\r\\n        str[1] = 'x';\\r\\n        for (uint i = 0; i < 20; i++) {\\r\\n            str[i * 2 + 2] = HEX[uint8(_bytes[i + 12] >> 4)];\\r\\n            str[i * 2 + 3] = HEX[uint8(_bytes[i + 12] & 0x0f)];\\r\\n        }\\r\\n        return string(str);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Converts Solidity bytes to a string\\r\\n     * @param _bytes Input bytes\\r\\n     * @return res Input bytes in a string format with '0x' prefix\\r\\n     */\\r\\n    function toHexString(bytes memory _bytes) public pure returns (string memory) {\\r\\n        bytes memory hexString = new bytes(_bytes.length * 2);\\r\\n\\r\\n        uint256 index = 0;\\r\\n        for (uint256 i = 0; i < _bytes.length; i++) {\\r\\n            uint256 value = uint256(uint8(_bytes[i]));\\r\\n\\r\\n            bytes1 highNibble = bytes1(uint8((value & 0xf0) >> 4));\\r\\n            bytes1 lowNibble = bytes1(uint8(value & 0x0f));\\r\\n\\r\\n            hexString[index++] = charToHex(highNibble);\\r\\n            hexString[index++] = charToHex(lowNibble);\\r\\n        }\\r\\n\\r\\n        return string(abi.encodePacked('0x', string(hexString)));\\r\\n    }\\r\\n\\r\\n    function charToHex(bytes1 _char) private pure returns (bytes1) {\\r\\n        if (uint8(_char) < 10) {\\r\\n            return bytes1(uint8(_char) + 0x30); // '0' to '9'\\r\\n        } else {\\r\\n            return bytes1(uint8(_char) + 0x57); // 'a' to 'f'\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xb3480132ce0f48ca9c7e33005afc117d2d268aad436fc867ed1d2d8e705cb6ac\",\"license\":\"UNLICENSED\"},\"contracts/libs/common/ProofTypes.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary ProofTypes {\\r\\n    enum Proofs {\\r\\n        ProofOfAuthority,\\r\\n        ProofOfSignature,\\r\\n        ProofOfAgreement\\r\\n    }\\r\\n}\",\"keccak256\":\"0xcdfb33e32fff9df02977629858f58c1215e7e54e13a99f323f4d8e960c3d1571\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806376fb3efd11610097578063bdc5779e11610066578063bdc5779e146102ac578063c2fb26a6146102dc578063f2fde38b146102fb578063fdf925e514610317576100f5565b806376fb3efd146102105780638da5cb5b14610240578063acbb20a61461025e578063bbc1e2f71461027c576100f5565b8063620622a1116100d3578063620622a11461018a5780636d0b7fe0146101a65780636e0bb65d146101d6578063715018a614610206576100f5565b80631afee7f5146100fa5780635411cdad1461012a5780635e3e4f941461015a575b600080fd5b610114600480360381019061010f91906119de565b610347565b6040516101219190611a40565b60405180910390f35b610144600480360381019061013f9190611c7c565b6103c1565b6040516101519190611d03565b60405180910390f35b610174600480360381019061016f9190611d1e565b6104a5565b604051610181919061206e565b60405180910390f35b6101a4600480360381019061019f9190612090565b610589565b005b6101c060048036038101906101bb9190612163565b610626565b6040516101cd91906121da565b60405180910390f35b6101f060048036038101906101eb9190612163565b6106c6565b6040516101fd91906121da565b60405180910390f35b61020e610766565b005b61022a60048036038101906102259190612163565b61077a565b60405161023791906121da565b60405180910390f35b61024861081a565b6040516102559190611d03565b60405180910390f35b610266610843565b6040516102739190611d03565b60405180910390f35b61029660048036038101906102919190612232565b610869565b6040516102a39190611a40565b60405180910390f35b6102c660048036038101906102c19190611d1e565b61089a565b6040516102d39190611a40565b60405180910390f35b6102e461093d565b6040516102f2929190612272565b60405180910390f35b610315600480360381019061031091906122a9565b610a5f565b005b610331600480360381019061032c91906122d6565b610ae2565b60405161033e91906121da565b60405180910390f35b6000606060005b83518110156103b0578161037b85838151811061036e5761036d61234e565b5b6020026020010151610c08565b60405160200161038c9291906123da565b604051602081830303815290604052915080806103a890612431565b91505061034e565b508080519060200120915050919050565b60008061044b60405180604001604052806040518060400160405280600781526020017f64616f7369676e0000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f302e312e30000000000000000000000000000000000000000000000000000000815250815250610c70565b905060006104588561089a565b90506000828260405160200161046f9291906124d0565b60405160208183030381529060405280519060200120905061049a8582610cdf90919063ffffffff16565b935050505092915050565b6104ad611646565b60066000836040516020016104c291906125bf565b60405160208183030381529060405280519060200120815260200190815260200160002080546104f190612610565b80601f016020809104026020016040519081016040528092919081815260200182805461051d90612610565b801561056a5780601f1061053f5761010080835404028352916020019161056a565b820191906000526020600020905b81548152906001019060200180831161054d57829003601f168201915b50505050508060200190518101906105829190612a64565b9050919050565b826020015173ffffffffffffffffffffffffffffffffffffffff166105ae84846103c1565b73ffffffffffffffffffffffffffffffffffffffff1614610604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fb90612af9565b60405180910390fd5b61060d83610d06565b61061657600080fd5b610621838383611014565b505050565b6004602052806000526040600020600091509050805461064590612610565b80601f016020809104026020016040519081016040528092919081815260200182805461067190612610565b80156106be5780601f10610693576101008083540402835291602001916106be565b820191906000526020600020905b8154815290600101906020018083116106a157829003601f168201915b505050505081565b600360205280600052604060002060009150905080546106e590612610565b80601f016020809104026020016040519081016040528092919081815260200182805461071190612610565b801561075e5780601f106107335761010080835404028352916020019161075e565b820191906000526020600020905b81548152906001019060200180831161074157829003601f168201915b505050505081565b61076e61114b565b61077860006111c9565b565b6005602052806000526040600020600091509050805461079990612610565b80601f01602080910402602001604051908101604052809291908181526020018280546107c590612610565b80156108125780601f106107e757610100808354040283529160200191610812565b820191906000526020600020905b8154815290600101906020018083116107f557829003601f168201915b505050505081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6007602052816000526040600020818154811061088557600080fd5b90600052602060002001600091509150505481565b6000807f2e1787b39b12d39a11d61d71f3da25d1061d7f8a84df10ac9bb5505fb6756e7e83600001518051906020012084602001518560400151805190602001206108e88760600151610347565b8760800151805190602001208860a001518960c001518051906020012060405160200161091c989796959493929190612b28565b60405160208183030381529060405290508080519060200120915050919050565b600880600001805461094e90612610565b80601f016020809104026020016040519081016040528092919081815260200182805461097a90612610565b80156109c75780601f1061099c576101008083540402835291602001916109c7565b820191906000526020600020905b8154815290600101906020018083116109aa57829003601f168201915b5050505050908060010180546109dc90612610565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0890612610565b8015610a555780601f10610a2a57610100808354040283529160200191610a55565b820191906000526020600020905b815481529060010190602001808311610a3857829003601f168201915b5050505050905082565b610a6761114b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ad6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acd90612c18565b60405180910390fd5b610adf816111c9565b50565b60028280516020810182018051848252602083016020850120818352809550505050505081805160208101820180518482526020830160208501208183528095505050505050600091509150508054610b3a90612610565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6690612610565b8015610bb35780601f10610b8857610100808354040283529160200191610bb3565b820191906000526020600020905b815481529060010190602001808311610b9657829003601f168201915b505050505081565b6000610be7827f01ffc9a70000000000000000000000000000000000000000000000000000000061128d565b8015610c015750610bff8263ffffffff60e01b61128d565b155b9050919050565b6000807f67aa40d26f889f44ec5fecd21b812b43af0974bbc5e74283b01e36ceb272966f8360000151846020015180519060200120604051602001610c4f93929190612c38565b60405160208183030381529060405290508080519060200120915050919050565b6000807fb03948446334eb9b2196d5eb166f69b9d49403eb4a12f36de8d3f9f3cb8e15c3836000015180519060200120846020015180519060200120604051602001610cbe93929190612c6f565b60405160208183030381529060405290508080519060200120915050919050565b6000806000610cee858561134c565b91509150610cfb8161139d565b819250505092915050565b6000610d546040518060400160405280601281526020017f50726f6f662d6f662d417574686f726974790000000000000000000000000000815250836000015161150390919063ffffffff16565b610d93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8a90612cf2565b60405180910390fd5b602e826040015173__$010b943296133a43821a132050619653d2$__63436a66e790916040518263ffffffff1660e01b8152600401610dd29190612d5c565b602060405180830381865af4158015610def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e139190612d93565b14610e53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4a90612e0c565b60405180910390fd5b610e9f6040518060400160405280600781526020017f64616f7369676e00000000000000000000000000000000000000000000000000815250836080015161150390919063ffffffff16565b610ede576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed590612e78565b60405180910390fd5b428260a0015167ffffffffffffffff1611158015610f175750612a3042610f059190612e98565b8260a0015167ffffffffffffffff1610155b610f56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4d90612f18565b60405180910390fd5b60005b82606001515181101561100a57600073ffffffffffffffffffffffffffffffffffffffff1683606001518281518110610f9557610f9461234e565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1603610ff7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fee90612f84565b60405180910390fd5b808061100290612431565b915050610f59565b5060019050919050565b60008360405160200161102791906125bf565b60405160208183030381529060405280519060200120905060405180606001604052808481526020018381526020018581525060405160200161106a919061206e565b6040516020818303038152906040526006600083815260200190815260200160002090816110989190613150565b5060076000856020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055836040516111119190613419565b60405180910390207fa964d7c3eb8968ce8f7c6c887dd351c670e547ba865ae23ab238389982000c0260405160405180910390a250505050565b61115361155c565b73ffffffffffffffffffffffffffffffffffffffff1661117161081a565b73ffffffffffffffffffffffffffffffffffffffff16146111c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111be9061347c565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000806301ffc9a760e01b836040516024016112a991906134d7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000806000602060008551602087018a617530fa92503d91506000519050828015611334575060208210155b80156113405750600081115b94505050505092915050565b600080604183510361138d5760008060006020860151925060408601519150606086015160001a905061138187828585611564565b94509450505050611396565b60006002915091505b9250929050565b600060048111156113b1576113b06134f2565b5b8160048111156113c4576113c36134f2565b5b031561150057600160048111156113de576113dd6134f2565b5b8160048111156113f1576113f06134f2565b5b03611431576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114289061356d565b60405180910390fd5b60026004811115611445576114446134f2565b5b816004811115611458576114576134f2565b5b03611498576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148f906135d9565b60405180910390fd5b600360048111156114ac576114ab6134f2565b5b8160048111156114bf576114be6134f2565b5b036114ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f69061366b565b60405180910390fd5b5b50565b60008160405160200161151691906136bc565b604051602081830303815290604052805190602001208360405160200161153d91906136bc565b6040516020818303038152906040528051906020012014905092915050565b600033905090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561159f57600060039150915061163d565b6000600187878787604051600081526020016040526040516115c494939291906136ef565b6020604051602081039080840390855afa1580156115e6573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036116345760006001925092505061163d565b80600092509250505b94509492505050565b6040518060600160405280606081526020016060815260200161166761166d565b81525090565b6040518060e0016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001600067ffffffffffffffff168152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61172c826116e3565b810181811067ffffffffffffffff8211171561174b5761174a6116f4565b5b80604052505050565b600061175e6116ca565b905061176a8282611723565b919050565b600067ffffffffffffffff82111561178a576117896116f4565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117d5826117aa565b9050919050565b6117e5816117ca565b81146117f057600080fd5b50565b600081359050611802816117dc565b92915050565b600080fd5b600067ffffffffffffffff821115611828576118276116f4565b5b611831826116e3565b9050602081019050919050565b82818337600083830152505050565b600061186061185b8461180d565b611754565b90508281526020810184848401111561187c5761187b611808565b5b61188784828561183e565b509392505050565b600082601f8301126118a4576118a36116de565b5b81356118b484826020860161184d565b91505092915050565b6000604082840312156118d3576118d26117a0565b5b6118dd6040611754565b905060006118ed848285016117f3565b600083015250602082013567ffffffffffffffff811115611911576119106117a5565b5b61191d8482850161188f565b60208301525092915050565b600061193c6119378461176f565b611754565b9050808382526020820190506020840283018581111561195f5761195e61179b565b5b835b818110156119a657803567ffffffffffffffff811115611984576119836116de565b5b80860161199189826118bd565b85526020850194505050602081019050611961565b5050509392505050565b600082601f8301126119c5576119c46116de565b5b81356119d5848260208601611929565b91505092915050565b6000602082840312156119f4576119f36116d4565b5b600082013567ffffffffffffffff811115611a1257611a116116d9565b5b611a1e848285016119b0565b91505092915050565b6000819050919050565b611a3a81611a27565b82525050565b6000602082019050611a556000830184611a31565b92915050565b600067ffffffffffffffff82169050919050565b611a7881611a5b565b8114611a8357600080fd5b50565b600081359050611a9581611a6f565b92915050565b600060e08284031215611ab157611ab06117a0565b5b611abb60e0611754565b9050600082013567ffffffffffffffff811115611adb57611ada6117a5565b5b611ae78482850161188f565b6000830152506020611afb848285016117f3565b602083015250604082013567ffffffffffffffff811115611b1f57611b1e6117a5565b5b611b2b8482850161188f565b604083015250606082013567ffffffffffffffff811115611b4f57611b4e6117a5565b5b611b5b848285016119b0565b606083015250608082013567ffffffffffffffff811115611b7f57611b7e6117a5565b5b611b8b8482850161188f565b60808301525060a0611b9f84828501611a86565b60a08301525060c082013567ffffffffffffffff811115611bc357611bc26117a5565b5b611bcf8482850161188f565b60c08301525092915050565b600067ffffffffffffffff821115611bf657611bf56116f4565b5b611bff826116e3565b9050602081019050919050565b6000611c1f611c1a84611bdb565b611754565b905082815260208101848484011115611c3b57611c3a611808565b5b611c4684828561183e565b509392505050565b600082601f830112611c6357611c626116de565b5b8135611c73848260208601611c0c565b91505092915050565b60008060408385031215611c9357611c926116d4565b5b600083013567ffffffffffffffff811115611cb157611cb06116d9565b5b611cbd85828601611a9b565b925050602083013567ffffffffffffffff811115611cde57611cdd6116d9565b5b611cea85828601611c4e565b9150509250929050565b611cfd816117ca565b82525050565b6000602082019050611d186000830184611cf4565b92915050565b600060208284031215611d3457611d336116d4565b5b600082013567ffffffffffffffff811115611d5257611d516116d9565b5b611d5e84828501611a9b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611da1578082015181840152602081019050611d86565b60008484015250505050565b6000611db882611d67565b611dc28185611d72565b9350611dd2818560208601611d83565b611ddb816116e3565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000611e0d82611de6565b611e178185611df1565b9350611e27818560208601611d83565b611e30816116e3565b840191505092915050565b611e44816117ca565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000604083016000830151611e8e6000860182611e3b565b5060208301518482036020860152611ea68282611e02565b9150508091505092915050565b6000611ebf8383611e76565b905092915050565b6000602082019050919050565b6000611edf82611e4a565b611ee98185611e55565b935083602082028501611efb85611e66565b8060005b85811015611f375784840389528151611f188582611eb3565b9450611f2383611ec7565b925060208a01995050600181019050611eff565b50829750879550505050505092915050565b611f5281611a5b565b82525050565b600060e0830160008301518482036000860152611f758282611e02565b9150506020830151611f8a6020860182611e3b565b5060408301518482036040860152611fa28282611e02565b91505060608301518482036060860152611fbc8282611ed4565b91505060808301518482036080860152611fd68282611e02565b91505060a0830151611feb60a0860182611f49565b5060c083015184820360c08601526120038282611e02565b9150508091505092915050565b6000606083016000830151848203600086015261202d8282611dad565b915050602083015184820360208601526120478282611e02565b915050604083015184820360408601526120618282611f58565b9150508091505092915050565b600060208201905081810360008301526120888184612010565b905092915050565b6000806000606084860312156120a9576120a86116d4565b5b600084013567ffffffffffffffff8111156120c7576120c66116d9565b5b6120d386828701611a9b565b935050602084013567ffffffffffffffff8111156120f4576120f36116d9565b5b61210086828701611c4e565b925050604084013567ffffffffffffffff811115612121576121206116d9565b5b61212d8682870161188f565b9150509250925092565b61214081611a27565b811461214b57600080fd5b50565b60008135905061215d81612137565b92915050565b600060208284031215612179576121786116d4565b5b60006121878482850161214e565b91505092915050565b600082825260208201905092915050565b60006121ac82611de6565b6121b68185612190565b93506121c6818560208601611d83565b6121cf816116e3565b840191505092915050565b600060208201905081810360008301526121f481846121a1565b905092915050565b6000819050919050565b61220f816121fc565b811461221a57600080fd5b50565b60008135905061222c81612206565b92915050565b60008060408385031215612249576122486116d4565b5b6000612257858286016117f3565b92505060206122688582860161221d565b9150509250929050565b6000604082019050818103600083015261228c81856121a1565b905081810360208301526122a081846121a1565b90509392505050565b6000602082840312156122bf576122be6116d4565b5b60006122cd848285016117f3565b91505092915050565b600080604083850312156122ed576122ec6116d4565b5b600083013567ffffffffffffffff81111561230b5761230a6116d9565b5b6123178582860161188f565b925050602083013567ffffffffffffffff811115612338576123376116d9565b5b6123448582860161188f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b600061239382611d67565b61239d818561237d565b93506123ad818560208601611d83565b80840191505092915050565b6000819050919050565b6123d46123cf82611a27565b6123b9565b82525050565b60006123e68285612388565b91506123f282846123c3565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061243c826121fc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361246e5761246d612402565b5b600182019050919050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006124ba600283612479565b91506124c582612484565b600282019050919050565b60006124db826124ad565b91506124e782856123c3565b6020820191506124f782846123c3565b6020820191508190509392505050565b600060e08301600083015184820360008601526125248282611e02565b91505060208301516125396020860182611e3b565b50604083015184820360408601526125518282611e02565b9150506060830151848203606086015261256b8282611ed4565b915050608083015184820360808601526125858282611e02565b91505060a083015161259a60a0860182611f49565b5060c083015184820360c08601526125b28282611e02565b9150508091505092915050565b600060208201905081810360008301526125d98184612507565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061262857607f821691505b60208210810361263b5761263a6125e1565b5b50919050565b600061265461264f84611bdb565b611754565b9050828152602081018484840111156126705761266f611808565b5b61267b848285611d83565b509392505050565b600082601f830112612698576126976116de565b5b81516126a8848260208601612641565b91505092915050565b60006126c46126bf8461180d565b611754565b9050828152602081018484840111156126e0576126df611808565b5b6126eb848285611d83565b509392505050565b600082601f830112612708576127076116de565b5b81516127188482602086016126b1565b91505092915050565b600081519050612730816117dc565b92915050565b60006040828403121561274c5761274b6117a0565b5b6127566040611754565b9050600061276684828501612721565b600083015250602082015167ffffffffffffffff81111561278a576127896117a5565b5b612796848285016126f3565b60208301525092915050565b60006127b56127b08461176f565b611754565b905080838252602082019050602084028301858111156127d8576127d761179b565b5b835b8181101561281f57805167ffffffffffffffff8111156127fd576127fc6116de565b5b80860161280a8982612736565b855260208501945050506020810190506127da565b5050509392505050565b600082601f83011261283e5761283d6116de565b5b815161284e8482602086016127a2565b91505092915050565b60008151905061286681611a6f565b92915050565b600060e08284031215612882576128816117a0565b5b61288c60e0611754565b9050600082015167ffffffffffffffff8111156128ac576128ab6117a5565b5b6128b8848285016126f3565b60008301525060206128cc84828501612721565b602083015250604082015167ffffffffffffffff8111156128f0576128ef6117a5565b5b6128fc848285016126f3565b604083015250606082015167ffffffffffffffff8111156129205761291f6117a5565b5b61292c84828501612829565b606083015250608082015167ffffffffffffffff8111156129505761294f6117a5565b5b61295c848285016126f3565b60808301525060a061297084828501612857565b60a08301525060c082015167ffffffffffffffff811115612994576129936117a5565b5b6129a0848285016126f3565b60c08301525092915050565b6000606082840312156129c2576129c16117a0565b5b6129cc6060611754565b9050600082015167ffffffffffffffff8111156129ec576129eb6117a5565b5b6129f884828501612683565b600083015250602082015167ffffffffffffffff811115612a1c57612a1b6117a5565b5b612a28848285016126f3565b602083015250604082015167ffffffffffffffff811115612a4c57612a4b6117a5565b5b612a588482850161286c565b60408301525092915050565b600060208284031215612a7a57612a796116d4565b5b600082015167ffffffffffffffff811115612a9857612a976116d9565b5b612aa4848285016129ac565b91505092915050565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b6000612ae3601183612190565b9150612aee82612aad565b602082019050919050565b60006020820190508181036000830152612b1281612ad6565b9050919050565b612b2281611a5b565b82525050565b600061010082019050612b3e600083018b611a31565b612b4b602083018a611a31565b612b586040830189611cf4565b612b656060830188611a31565b612b726080830187611a31565b612b7f60a0830186611a31565b612b8c60c0830185612b19565b612b9960e0830184611a31565b9998505050505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612c02602683612190565b9150612c0d82612ba6565b604082019050919050565b60006020820190508181036000830152612c3181612bf5565b9050919050565b6000606082019050612c4d6000830186611a31565b612c5a6020830185611cf4565b612c676040830184611a31565b949350505050565b6000606082019050612c846000830186611a31565b612c916020830185611a31565b612c9e6040830184611a31565b949350505050565b7f496e76616c6964206e616d650000000000000000000000000000000000000000600082015250565b6000612cdc600c83612190565b9150612ce782612ca6565b602082019050919050565b60006020820190508181036000830152612d0b81612ccf565b9050919050565b600082825260208201905092915050565b6000612d2e82611de6565b612d388185612d12565b9350612d48818560208601611d83565b612d51816116e3565b840191505092915050565b60006020820190508181036000830152612d768184612d23565b905092915050565b600081519050612d8d81612206565b92915050565b600060208284031215612da957612da86116d4565b5b6000612db784828501612d7e565b91505092915050565b7f496e76616c696420434944206c656e6774680000000000000000000000000000600082015250565b6000612df6601283612190565b9150612e0182612dc0565b602082019050919050565b60006020820190508181036000830152612e2581612de9565b9050919050565b7f496e76616c696420617070000000000000000000000000000000000000000000600082015250565b6000612e62600b83612190565b9150612e6d82612e2c565b602082019050919050565b60006020820190508181036000830152612e9181612e55565b9050919050565b6000612ea3826121fc565b9150612eae836121fc565b9250828203905081811115612ec657612ec5612402565b5b92915050565b7f496e76616c69642074696d657374616d70000000000000000000000000000000600082015250565b6000612f02601183612190565b9150612f0d82612ecc565b602082019050919050565b60006020820190508181036000830152612f3181612ef5565b9050919050565b7f496e76616c6964207369676e6572000000000000000000000000000000000000600082015250565b6000612f6e600e83612190565b9150612f7982612f38565b602082019050919050565b60006020820190508181036000830152612f9d81612f61565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026130067fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612fc9565b6130108683612fc9565b95508019841693508086168417925050509392505050565b6000819050919050565b600061304d613048613043846121fc565b613028565b6121fc565b9050919050565b6000819050919050565b61306783613032565b61307b61307382613054565b848454612fd6565b825550505050565b600090565b613090613083565b61309b81848461305e565b505050565b5b818110156130bf576130b4600082613088565b6001810190506130a1565b5050565b601f821115613104576130d581612fa4565b6130de84612fb9565b810160208510156130ed578190505b6131016130f985612fb9565b8301826130a0565b50505b505050565b600082821c905092915050565b600061312760001984600802613109565b1980831691505092915050565b60006131408383613116565b9150826002028217905092915050565b61315982611d67565b67ffffffffffffffff811115613172576131716116f4565b5b61317c8254612610565b6131878282856130c3565b600060209050601f8311600181146131ba57600084156131a8578287015190505b6131b28582613134565b86555061321a565b601f1984166131c886612fa4565b60005b828110156131f0578489015182556001820191506020850194506020810190506131cb565b8683101561320d5784890151613209601f891682613116565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b600061323882611de6565b6132428185613222565b9350613252818560208601611d83565b61325b816116e3565b840191505092915050565b6000613272838361322d565b905092915050565b613283816117ca565b82525050565b6000613295838361327a565b60208301905092915050565b600081905092915050565b600080830160008301516132c08582613289565b94505060208301516132d28582613266565b9450508391505092915050565b60006132eb83836132ac565b905092915050565b60006132fe82611e4a565b61330881856132a1565b935061331383611e66565b8060005b8381101561334457815161332b88826132df565b975061333683611ec7565b925050600181019050613317565b5085935050505092915050565b600061335d83836132f3565b905092915050565b61336e81611a5b565b82525050565b60006133808383613365565b60208301905092915050565b600080830160008301516133a08582613266565b94505060208301516133b28582613289565b94505060408301516133c48582613266565b94505060608301516133d68582613351565b94505060808301516133e88582613266565b94505060a08301516133fa8582613374565b94505060c083015161340c8582613266565b9450508391505092915050565b6000613425828461338c565b915081905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613466602083612190565b915061347182613430565b602082019050919050565b6000602082019050818103600083015261349581613459565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6134d18161349c565b82525050565b60006020820190506134ec60008301846134c8565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000613557601883612190565b915061356282613521565b602082019050919050565b600060208201905081810360008301526135868161354a565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006135c3601f83612190565b91506135ce8261358d565b602082019050919050565b600060208201905081810360008301526135f2816135b6565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000613655602283612190565b9150613660826135f9565b604082019050919050565b6000602082019050818103600083015261368481613648565b9050919050565b600061369682611de6565b6136a08185612479565b93506136b0818560208601611d83565b80840191505092915050565b60006136c8828461368b565b915081905092915050565b600060ff82169050919050565b6136e9816136d3565b82525050565b60006080820190506137046000830187611a31565b61371160208301866136e0565b61371e6040830185611a31565b61372b6060830184611a31565b9594505050505056fea264697066735822122028b4cbc3fa6a76c6bc1d7deebfb38a70b918a5157553d07f3cb86a0cf549e6df64736f6c63430008120033",
  "libraries": {
    "StringsExpanded": "0x377662a8588c20Bf94B3b5685d096FE1CdF70Ef6",
    "ProofsVerification": "0x9f413bA7fba12E1102aDFb421390Fd6f5E4AbEd6",
    "ProofsHelper": "0xDb04110AdbA966fA6Ce95975B940fA85E8D024EB",
    "ProofsMetadata": "0xf282509F9C5ACe2666163795119C52e738D0e198"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "domain()": {
        "notice": "TODO: move to ProofsMetadata"
      }
    },
    "notice": "Stores DAOsign proofs. Note Proof-of-Authority = PoA Proof-of-Signature = PoS Proof-of-Agreement = PoAg",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Proofs.sol:Proofs",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1973,
        "contract": "contracts/Proofs.sol:Proofs",
        "label": "proofsMetadata",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1979,
        "contract": "contracts/Proofs.sol:Proofs",
        "label": "finalProofs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_string_storage))"
      },
      {
        "astId": 1983,
        "contract": "contracts/Proofs.sol:Proofs",
        "label": "poaData",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 1987,
        "contract": "contracts/Proofs.sol:Proofs",
        "label": "posData",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 1991,
        "contract": "contracts/Proofs.sol:Proofs",
        "label": "poagData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 1995,
        "contract": "contracts/Proofs.sol:Proofs",
        "label": "proofs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 2000,
        "contract": "contracts/Proofs.sol:Proofs",
        "label": "myProofKeys",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 2042,
        "contract": "contracts/Proofs.sol:Proofs",
        "label": "domain",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(EIP712Domain)2809_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(string => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(EIP712Domain)2809_storage": {
        "encoding": "inplace",
        "label": "struct IProofs.EIP712Domain",
        "members": [
          {
            "astId": 2806,
            "contract": "contracts/Proofs.sol:Proofs",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2808,
            "contract": "contracts/Proofs.sol:Proofs",
            "label": "version",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}